{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"1PIUir6rraNmcOs5TukBa453qlCgOMjyn","authorship_tag":"ABX9TyMPpJTPOAfKTp4rgdxN8pDN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Queremos estimar el patrón de ratings de usuarios nuevos usando un MRUV. La ecuación a estimar cantidad de ratings en función del tiempo Q(t)=1+v∗t+1/2∗a∗t2. ¿Qué correlación hay entre la aceleración y velocidad individual de cada usuario? Haga un scatter plot de aceleración y velocidad. ¿Qué valores de v y de a resultan de tomar las velocidades y aceleraciones promedio de todos los usuarios que dieran más de 10 ratings? Grafique la Q resultante en función de t. Grafique en otro plot las series de tiempo de 100 usuarios random para comparar que tan bueno es nuestro modelo."],"metadata":{"id":"bZnFCTfPTJyh"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"ZIhhCFvxS43X","executionInfo":{"status":"ok","timestamp":1664214723112,"user_tz":180,"elapsed":16142,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"outputs":[],"source":["import pandas as pd\n","ratings = pd.read_csv('/content/drive/MyDrive/Movie dataset/ratings.csv')"]},{"cell_type":"code","source":["#Elimino los usuarios no validos\n","ratings_por_usuario = ratings.groupby('userId').count()\n","ratings_por_usuario"],"metadata":{"id":"hBMUO2HL2SXC","colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"status":"ok","timestamp":1664214726039,"user_tz":180,"elapsed":805,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"04e13586-7e49-49fe-a5d1-db9587eb3d86"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        movieId  rating  timestamp\n","userId                            \n","1            27      27         27\n","2            22      22         22\n","3            10      10         10\n","4            62      62         62\n","5            26      26         26\n","...         ...     ...        ...\n","270892       75      75         75\n","270893      190     190        190\n","270894      148     148        148\n","270895       20      20         20\n","270896      260     260        260\n","\n","[270896 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-d38defc1-163d-4112-9443-39783a029eb4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","    <tr>\n","      <th>userId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>27</td>\n","      <td>27</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>62</td>\n","      <td>62</td>\n","      <td>62</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>26</td>\n","      <td>26</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>270892</th>\n","      <td>75</td>\n","      <td>75</td>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>270893</th>\n","      <td>190</td>\n","      <td>190</td>\n","      <td>190</td>\n","    </tr>\n","    <tr>\n","      <th>270894</th>\n","      <td>148</td>\n","      <td>148</td>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>270895</th>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>270896</th>\n","      <td>260</td>\n","      <td>260</td>\n","      <td>260</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>270896 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d38defc1-163d-4112-9443-39783a029eb4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d38defc1-163d-4112-9443-39783a029eb4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d38defc1-163d-4112-9443-39783a029eb4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["#Agarro los index de los usuarios que tengan menos de 10 Ratings\n","usuarios_no_validos =list(ratings_por_usuario[ratings_por_usuario['rating']<10].index) \n","usuarios_no_validos"],"metadata":{"id":"6ymU0iQQjiQW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664214727666,"user_tz":180,"elapsed":2,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"93c6cbbf-1a03-4f08-a703-5326ff6d7e35"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[6,\n"," 14,\n"," 18,\n"," 26,\n"," 31,\n"," 39,\n"," 42,\n"," 45,\n"," 85,\n"," 92,\n"," 100,\n"," 108,\n"," 110,\n"," 113,\n"," 121,\n"," 130,\n"," 143,\n"," 145,\n"," 149,\n"," 152,\n"," 154,\n"," 172,\n"," 175,\n"," 177,\n"," 183,\n"," 202,\n"," 203,\n"," 205,\n"," 208,\n"," 214,\n"," 237,\n"," 238,\n"," 239,\n"," 243,\n"," 257,\n"," 258,\n"," 263,\n"," 268,\n"," 278,\n"," 282,\n"," 283,\n"," 300,\n"," 301,\n"," 304,\n"," 327,\n"," 328,\n"," 333,\n"," 339,\n"," 347,\n"," 351,\n"," 373,\n"," 379,\n"," 381,\n"," 383,\n"," 385,\n"," 394,\n"," 396,\n"," 399,\n"," 402,\n"," 409,\n"," 424,\n"," 437,\n"," 441,\n"," 444,\n"," 446,\n"," 449,\n"," 462,\n"," 467,\n"," 473,\n"," 484,\n"," 486,\n"," 525,\n"," 531,\n"," 532,\n"," 547,\n"," 560,\n"," 562,\n"," 566,\n"," 569,\n"," 571,\n"," 577,\n"," 589,\n"," 591,\n"," 594,\n"," 601,\n"," 610,\n"," 612,\n"," 617,\n"," 626,\n"," 634,\n"," 639,\n"," 642,\n"," 644,\n"," 649,\n"," 650,\n"," 655,\n"," 657,\n"," 662,\n"," 665,\n"," 666,\n"," 670,\n"," 683,\n"," 693,\n"," 695,\n"," 696,\n"," 705,\n"," 709,\n"," 712,\n"," 716,\n"," 723,\n"," 734,\n"," 737,\n"," 756,\n"," 770,\n"," 771,\n"," 787,\n"," 820,\n"," 827,\n"," 833,\n"," 855,\n"," 861,\n"," 868,\n"," 895,\n"," 897,\n"," 899,\n"," 901,\n"," 905,\n"," 907,\n"," 912,\n"," 919,\n"," 923,\n"," 928,\n"," 935,\n"," 938,\n"," 939,\n"," 944,\n"," 945,\n"," 946,\n"," 970,\n"," 972,\n"," 973,\n"," 976,\n"," 977,\n"," 980,\n"," 995,\n"," 1000,\n"," 1007,\n"," 1022,\n"," 1024,\n"," 1028,\n"," 1032,\n"," 1042,\n"," 1043,\n"," 1077,\n"," 1081,\n"," 1085,\n"," 1086,\n"," 1089,\n"," 1094,\n"," 1099,\n"," 1101,\n"," 1123,\n"," 1127,\n"," 1137,\n"," 1146,\n"," 1157,\n"," 1174,\n"," 1180,\n"," 1196,\n"," 1198,\n"," 1204,\n"," 1220,\n"," 1223,\n"," 1224,\n"," 1228,\n"," 1241,\n"," 1249,\n"," 1253,\n"," 1255,\n"," 1277,\n"," 1280,\n"," 1281,\n"," 1286,\n"," 1287,\n"," 1289,\n"," 1294,\n"," 1310,\n"," 1311,\n"," 1322,\n"," 1324,\n"," 1326,\n"," 1335,\n"," 1339,\n"," 1342,\n"," 1343,\n"," 1353,\n"," 1356,\n"," 1366,\n"," 1384,\n"," 1390,\n"," 1396,\n"," 1397,\n"," 1405,\n"," 1407,\n"," 1410,\n"," 1423,\n"," 1427,\n"," 1430,\n"," 1433,\n"," 1452,\n"," 1462,\n"," 1464,\n"," 1468,\n"," 1472,\n"," 1481,\n"," 1486,\n"," 1487,\n"," 1489,\n"," 1495,\n"," 1496,\n"," 1511,\n"," 1514,\n"," 1515,\n"," 1520,\n"," 1521,\n"," 1523,\n"," 1543,\n"," 1548,\n"," 1553,\n"," 1556,\n"," 1560,\n"," 1566,\n"," 1573,\n"," 1575,\n"," 1596,\n"," 1619,\n"," 1624,\n"," 1630,\n"," 1633,\n"," 1666,\n"," 1669,\n"," 1676,\n"," 1678,\n"," 1681,\n"," 1682,\n"," 1683,\n"," 1686,\n"," 1703,\n"," 1711,\n"," 1715,\n"," 1723,\n"," 1733,\n"," 1737,\n"," 1741,\n"," 1743,\n"," 1750,\n"," 1752,\n"," 1754,\n"," 1767,\n"," 1774,\n"," 1782,\n"," 1783,\n"," 1790,\n"," 1793,\n"," 1807,\n"," 1813,\n"," 1836,\n"," 1837,\n"," 1840,\n"," 1842,\n"," 1855,\n"," 1860,\n"," 1875,\n"," 1891,\n"," 1895,\n"," 1896,\n"," 1898,\n"," 1915,\n"," 1917,\n"," 1919,\n"," 1927,\n"," 1931,\n"," 1948,\n"," 1959,\n"," 1970,\n"," 1971,\n"," 1975,\n"," 1978,\n"," 1979,\n"," 1980,\n"," 1987,\n"," 1999,\n"," 2007,\n"," 2011,\n"," 2027,\n"," 2033,\n"," 2037,\n"," 2041,\n"," 2047,\n"," 2057,\n"," 2058,\n"," 2063,\n"," 2070,\n"," 2072,\n"," 2076,\n"," 2081,\n"," 2082,\n"," 2083,\n"," 2084,\n"," 2097,\n"," 2099,\n"," 2101,\n"," 2106,\n"," 2107,\n"," 2109,\n"," 2110,\n"," 2124,\n"," 2126,\n"," 2129,\n"," 2134,\n"," 2142,\n"," 2147,\n"," 2156,\n"," 2166,\n"," 2167,\n"," 2181,\n"," 2182,\n"," 2196,\n"," 2205,\n"," 2228,\n"," 2240,\n"," 2251,\n"," 2252,\n"," 2253,\n"," 2255,\n"," 2270,\n"," 2275,\n"," 2277,\n"," 2285,\n"," 2297,\n"," 2308,\n"," 2319,\n"," 2336,\n"," 2342,\n"," 2343,\n"," 2346,\n"," 2349,\n"," 2355,\n"," 2365,\n"," 2370,\n"," 2373,\n"," 2379,\n"," 2387,\n"," 2417,\n"," 2420,\n"," 2429,\n"," 2430,\n"," 2460,\n"," 2462,\n"," 2464,\n"," 2479,\n"," 2481,\n"," 2486,\n"," 2508,\n"," 2511,\n"," 2514,\n"," 2518,\n"," 2522,\n"," 2525,\n"," 2529,\n"," 2532,\n"," 2549,\n"," 2559,\n"," 2564,\n"," 2569,\n"," 2573,\n"," 2579,\n"," 2586,\n"," 2587,\n"," 2591,\n"," 2602,\n"," 2604,\n"," 2606,\n"," 2608,\n"," 2611,\n"," 2614,\n"," 2615,\n"," 2622,\n"," 2625,\n"," 2628,\n"," 2636,\n"," 2647,\n"," 2657,\n"," 2662,\n"," 2674,\n"," 2693,\n"," 2704,\n"," 2710,\n"," 2713,\n"," 2716,\n"," 2717,\n"," 2720,\n"," 2729,\n"," 2744,\n"," 2745,\n"," 2754,\n"," 2764,\n"," 2770,\n"," 2771,\n"," 2782,\n"," 2788,\n"," 2793,\n"," 2799,\n"," 2809,\n"," 2812,\n"," 2815,\n"," 2823,\n"," 2826,\n"," 2834,\n"," 2837,\n"," 2838,\n"," 2841,\n"," 2851,\n"," 2852,\n"," 2857,\n"," 2861,\n"," 2872,\n"," 2875,\n"," 2880,\n"," 2887,\n"," 2891,\n"," 2903,\n"," 2907,\n"," 2912,\n"," 2920,\n"," 2922,\n"," 2926,\n"," 2927,\n"," 2935,\n"," 2937,\n"," 2941,\n"," 2950,\n"," 2953,\n"," 2957,\n"," 2960,\n"," 2962,\n"," 2969,\n"," 2971,\n"," 2972,\n"," 2978,\n"," 2980,\n"," 2991,\n"," 2996,\n"," 3013,\n"," 3016,\n"," 3031,\n"," 3035,\n"," 3037,\n"," 3042,\n"," 3058,\n"," 3063,\n"," 3067,\n"," 3073,\n"," 3074,\n"," 3078,\n"," 3079,\n"," 3095,\n"," 3097,\n"," 3098,\n"," 3101,\n"," 3118,\n"," 3126,\n"," 3128,\n"," 3131,\n"," 3155,\n"," 3171,\n"," 3174,\n"," 3184,\n"," 3187,\n"," 3192,\n"," 3193,\n"," 3212,\n"," 3215,\n"," 3216,\n"," 3223,\n"," 3227,\n"," 3241,\n"," 3246,\n"," 3248,\n"," 3250,\n"," 3260,\n"," 3268,\n"," 3284,\n"," 3298,\n"," 3303,\n"," 3307,\n"," 3308,\n"," 3326,\n"," 3328,\n"," 3334,\n"," 3335,\n"," 3346,\n"," 3350,\n"," 3353,\n"," 3356,\n"," 3363,\n"," 3368,\n"," 3370,\n"," 3377,\n"," 3379,\n"," 3401,\n"," 3402,\n"," 3404,\n"," 3407,\n"," 3435,\n"," 3447,\n"," 3459,\n"," 3470,\n"," 3472,\n"," 3480,\n"," 3483,\n"," 3489,\n"," 3492,\n"," 3508,\n"," 3516,\n"," 3523,\n"," 3528,\n"," 3530,\n"," 3531,\n"," 3549,\n"," 3561,\n"," 3564,\n"," 3569,\n"," 3583,\n"," 3603,\n"," 3606,\n"," 3617,\n"," 3618,\n"," 3630,\n"," 3633,\n"," 3636,\n"," 3651,\n"," 3655,\n"," 3671,\n"," 3687,\n"," 3688,\n"," 3689,\n"," 3690,\n"," 3695,\n"," 3715,\n"," 3749,\n"," 3755,\n"," 3759,\n"," 3769,\n"," 3774,\n"," 3779,\n"," 3782,\n"," 3788,\n"," 3800,\n"," 3802,\n"," 3806,\n"," 3828,\n"," 3843,\n"," 3846,\n"," 3848,\n"," 3852,\n"," 3860,\n"," 3875,\n"," 3880,\n"," 3887,\n"," 3890,\n"," 3914,\n"," 3921,\n"," 3923,\n"," 3932,\n"," 3933,\n"," 3953,\n"," 3954,\n"," 3959,\n"," 3962,\n"," 3963,\n"," 3968,\n"," 3981,\n"," 4005,\n"," 4019,\n"," 4035,\n"," 4044,\n"," 4055,\n"," 4067,\n"," 4071,\n"," 4082,\n"," 4088,\n"," 4099,\n"," 4111,\n"," 4113,\n"," 4115,\n"," 4130,\n"," 4132,\n"," 4150,\n"," 4188,\n"," 4189,\n"," 4198,\n"," 4205,\n"," 4208,\n"," 4224,\n"," 4234,\n"," 4237,\n"," 4240,\n"," 4247,\n"," 4248,\n"," 4250,\n"," 4254,\n"," 4275,\n"," 4285,\n"," 4286,\n"," 4289,\n"," 4299,\n"," 4303,\n"," 4304,\n"," 4306,\n"," 4310,\n"," 4315,\n"," 4324,\n"," 4333,\n"," 4338,\n"," 4342,\n"," 4343,\n"," 4350,\n"," 4354,\n"," 4356,\n"," 4368,\n"," 4371,\n"," 4383,\n"," 4390,\n"," 4394,\n"," 4396,\n"," 4421,\n"," 4423,\n"," 4424,\n"," 4425,\n"," 4429,\n"," 4431,\n"," 4440,\n"," 4448,\n"," 4451,\n"," 4460,\n"," 4464,\n"," 4465,\n"," 4470,\n"," 4472,\n"," 4478,\n"," 4483,\n"," 4486,\n"," 4499,\n"," 4509,\n"," 4527,\n"," 4542,\n"," 4567,\n"," 4568,\n"," 4576,\n"," 4577,\n"," 4584,\n"," 4595,\n"," 4606,\n"," 4610,\n"," 4613,\n"," 4620,\n"," 4623,\n"," 4630,\n"," 4633,\n"," 4650,\n"," 4662,\n"," 4667,\n"," 4685,\n"," 4688,\n"," 4696,\n"," 4715,\n"," 4716,\n"," 4719,\n"," 4748,\n"," 4750,\n"," 4768,\n"," 4769,\n"," 4780,\n"," 4783,\n"," 4786,\n"," 4790,\n"," 4795,\n"," 4799,\n"," 4809,\n"," 4811,\n"," 4817,\n"," 4826,\n"," 4865,\n"," 4868,\n"," 4880,\n"," 4882,\n"," 4885,\n"," 4892,\n"," 4906,\n"," 4910,\n"," 4920,\n"," 4926,\n"," 4928,\n"," 4933,\n"," 4938,\n"," 4941,\n"," 4948,\n"," 4965,\n"," 4973,\n"," 4976,\n"," 4981,\n"," 4992,\n"," 4998,\n"," 4999,\n"," 5014,\n"," 5019,\n"," 5022,\n"," 5026,\n"," 5042,\n"," 5050,\n"," 5062,\n"," 5068,\n"," 5071,\n"," 5072,\n"," 5075,\n"," 5078,\n"," 5093,\n"," 5104,\n"," 5109,\n"," 5111,\n"," 5112,\n"," 5129,\n"," 5133,\n"," 5147,\n"," 5150,\n"," 5151,\n"," 5152,\n"," 5168,\n"," 5170,\n"," 5176,\n"," 5197,\n"," 5203,\n"," 5214,\n"," 5232,\n"," 5239,\n"," 5240,\n"," 5262,\n"," 5266,\n"," 5270,\n"," 5291,\n"," 5308,\n"," 5313,\n"," 5318,\n"," 5324,\n"," 5325,\n"," 5330,\n"," 5356,\n"," 5362,\n"," 5375,\n"," 5393,\n"," 5394,\n"," 5403,\n"," 5406,\n"," 5414,\n"," 5426,\n"," 5433,\n"," 5436,\n"," 5453,\n"," 5457,\n"," 5458,\n"," 5467,\n"," 5468,\n"," 5471,\n"," 5478,\n"," 5486,\n"," 5487,\n"," 5493,\n"," 5499,\n"," 5501,\n"," 5513,\n"," 5516,\n"," 5520,\n"," 5535,\n"," 5536,\n"," 5541,\n"," 5544,\n"," 5545,\n"," 5554,\n"," 5559,\n"," 5576,\n"," 5577,\n"," 5593,\n"," 5599,\n"," 5610,\n"," 5611,\n"," 5628,\n"," 5657,\n"," 5690,\n"," 5696,\n"," 5698,\n"," 5712,\n"," 5716,\n"," 5718,\n"," 5722,\n"," 5753,\n"," 5758,\n"," 5762,\n"," 5789,\n"," 5796,\n"," 5805,\n"," 5809,\n"," 5821,\n"," 5823,\n"," 5827,\n"," 5828,\n"," 5833,\n"," 5836,\n"," 5840,\n"," 5843,\n"," 5878,\n"," 5899,\n"," 5900,\n"," 5901,\n"," 5902,\n"," 5905,\n"," 5906,\n"," 5944,\n"," 5945,\n"," 5948,\n"," 5960,\n"," 5963,\n"," 5973,\n"," 5987,\n"," 5989,\n"," 5994,\n"," 5996,\n"," 6000,\n"," 6001,\n"," 6006,\n"," 6014,\n"," 6034,\n"," 6036,\n"," 6046,\n"," 6052,\n"," 6061,\n"," 6077,\n"," 6081,\n"," 6091,\n"," 6095,\n"," 6102,\n"," 6103,\n"," 6110,\n"," 6128,\n"," 6134,\n"," 6144,\n"," 6150,\n"," 6180,\n"," 6208,\n"," 6216,\n"," 6228,\n"," 6241,\n"," 6242,\n"," 6245,\n"," 6246,\n"," 6249,\n"," 6254,\n"," 6257,\n"," 6267,\n"," 6271,\n"," 6274,\n"," 6275,\n"," 6296,\n"," 6310,\n"," 6312,\n"," 6324,\n"," 6330,\n"," 6331,\n"," 6338,\n"," 6344,\n"," 6349,\n"," 6378,\n"," 6380,\n"," 6393,\n"," 6395,\n"," 6399,\n"," 6411,\n"," 6419,\n"," 6423,\n"," 6432,\n"," 6435,\n"," 6437,\n"," 6441,\n"," 6453,\n"," 6459,\n"," 6470,\n"," 6476,\n"," 6487,\n"," 6488,\n"," 6491,\n"," 6499,\n"," 6501,\n"," 6502,\n"," 6506,\n"," 6508,\n"," 6510,\n"," 6520,\n"," 6522,\n"," 6529,\n"," 6532,\n"," 6540,\n"," 6563,\n"," 6565,\n"," 6570,\n"," 6575,\n"," 6581,\n"," 6586,\n"," 6593,\n"," 6603,\n"," 6608,\n"," 6614,\n"," 6620,\n"," 6633,\n"," 6637,\n"," 6638,\n"," 6647,\n"," 6648,\n"," 6649,\n"," 6655,\n"," 6668,\n"," 6670,\n"," 6683,\n"," 6685,\n"," 6687,\n"," 6689,\n"," 6701,\n"," 6709,\n"," 6717,\n"," 6733,\n"," 6736,\n"," 6738,\n"," 6748,\n"," 6773,\n"," 6786,\n"," 6788,\n"," 6790,\n"," 6798,\n"," 6802,\n"," 6804,\n"," 6829,\n"," 6838,\n"," 6873,\n"," 6874,\n"," 6875,\n"," 6877,\n"," 6886,\n"," 6895,\n"," 6897,\n"," 6903,\n"," 6934,\n"," 6946,\n"," 6951,\n"," 6953,\n"," 6964,\n"," 6966,\n"," 6969,\n"," 6971,\n"," 6981,\n"," 6984,\n"," 6995,\n"," 7006,\n"," 7013,\n"," 7027,\n"," 7037,\n"," 7039,\n"," 7043,\n"," 7049,\n"," 7056,\n"," 7059,\n"," 7060,\n"," 7073,\n"," 7078,\n"," 7079,\n"," 7091,\n"," 7102,\n"," 7104,\n"," 7108,\n"," 7109,\n"," 7113,\n"," 7118,\n"," 7120,\n"," 7125,\n"," 7143,\n"," 7146,\n"," 7147,\n"," 7154,\n"," 7160,\n"," 7163,\n"," 7169,\n"," 7191,\n"," ...]"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["ratings = ratings[~ratings['userId'].isin(usuarios_no_validos)]"],"metadata":{"id":"X667YL1ldNG7","executionInfo":{"status":"ok","timestamp":1664214729951,"user_tz":180,"elapsed":709,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#Ordeno de menor a mayor los timestamp\n","ratings = ratings.sort_values(['userId','timestamp'],ascending = True) \n","ratings"],"metadata":{"id":"C2ziPk-bmTMa","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1664214754346,"user_tz":180,"elapsed":23391,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"8a6ac732-1be8-44ec-d1db-a5a65937bfbb"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          userId  movieId  rating   timestamp\n","6              1     2762     4.5  1425941300\n","13             1    54503     3.5  1425941313\n","26             1   112552     5.0  1425941336\n","23             1    96821     5.0  1425941382\n","11             1     5577     5.0  1425941397\n","...          ...      ...     ...         ...\n","26024229  270896     6870     5.0  1257034443\n","26024124  270896     1676     3.0  1257034447\n","26024103  270896     1230     4.5  1257034450\n","26024130  270896     1777     3.0  1257034455\n","26024138  270896     2001     3.0  1257034458\n","\n","[25847473 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-a48b9518-23e2-4755-9188-51bb1a83857c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>2762</td>\n","      <td>4.5</td>\n","      <td>1425941300</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>54503</td>\n","      <td>3.5</td>\n","      <td>1425941313</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>1</td>\n","      <td>112552</td>\n","      <td>5.0</td>\n","      <td>1425941336</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>1</td>\n","      <td>96821</td>\n","      <td>5.0</td>\n","      <td>1425941382</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>5577</td>\n","      <td>5.0</td>\n","      <td>1425941397</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>26024229</th>\n","      <td>270896</td>\n","      <td>6870</td>\n","      <td>5.0</td>\n","      <td>1257034443</td>\n","    </tr>\n","    <tr>\n","      <th>26024124</th>\n","      <td>270896</td>\n","      <td>1676</td>\n","      <td>3.0</td>\n","      <td>1257034447</td>\n","    </tr>\n","    <tr>\n","      <th>26024103</th>\n","      <td>270896</td>\n","      <td>1230</td>\n","      <td>4.5</td>\n","      <td>1257034450</td>\n","    </tr>\n","    <tr>\n","      <th>26024130</th>\n","      <td>270896</td>\n","      <td>1777</td>\n","      <td>3.0</td>\n","      <td>1257034455</td>\n","    </tr>\n","    <tr>\n","      <th>26024138</th>\n","      <td>270896</td>\n","      <td>2001</td>\n","      <td>3.0</td>\n","      <td>1257034458</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>25847473 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a48b9518-23e2-4755-9188-51bb1a83857c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a48b9518-23e2-4755-9188-51bb1a83857c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a48b9518-23e2-4755-9188-51bb1a83857c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#Saco los primeros tiempos de cada usuario\n","primeros_tiempos = ratings.groupby('userId').first()['timestamp']\n","primeros_tiempos"],"metadata":{"id":"tDBeJcnZWkOJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664214757489,"user_tz":180,"elapsed":978,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"6a416448-9b8f-4d8c-b43b-ed370119f0e4"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["userId\n","1         1425941300\n","2          867039165\n","3         1048076830\n","4         1042667845\n","5          949423787\n","             ...    \n","270892    1226038793\n","270893     992332091\n","270894    1419820446\n","270895     845431989\n","270896    1257031118\n","Name: timestamp, Length: 233903, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#Le resto a todos los valores el primero\n","ratings['Segundos'] = (ratings['timestamp'].to_numpy() - primeros_tiempos[ratings['userId']].to_numpy()).tolist() \n","ratings = ratings.reset_index()\n","ratings"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"-MeDyVPJoA-3","executionInfo":{"status":"ok","timestamp":1664214788784,"user_tz":180,"elapsed":9628,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"328fc2de-b9ff-406c-c0dd-94a6e1380784"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           level_0     index  userId  movieId  rating   timestamp  Segundos\n","0                0         6       1     2762     4.5  1425941300         0\n","1                1        13       1    54503     3.5  1425941313        13\n","2                2        26       1   112552     5.0  1425941336        36\n","3                3        23       1    96821     5.0  1425941382        82\n","4                4        11       1     5577     5.0  1425941397        97\n","...            ...       ...     ...      ...     ...         ...       ...\n","25847468  25847468  26024229  270896     6870     5.0  1257034443      3325\n","25847469  25847469  26024124  270896     1676     3.0  1257034447      3329\n","25847470  25847470  26024103  270896     1230     4.5  1257034450      3332\n","25847471  25847471  26024130  270896     1777     3.0  1257034455      3337\n","25847472  25847472  26024138  270896     2001     3.0  1257034458      3340\n","\n","[25847473 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-8393b041-3bd4-4400-887f-a05ce946616e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>level_0</th>\n","      <th>index</th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","      <th>Segundos</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>2762</td>\n","      <td>4.5</td>\n","      <td>1425941300</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>54503</td>\n","      <td>3.5</td>\n","      <td>1425941313</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>26</td>\n","      <td>1</td>\n","      <td>112552</td>\n","      <td>5.0</td>\n","      <td>1425941336</td>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>23</td>\n","      <td>1</td>\n","      <td>96821</td>\n","      <td>5.0</td>\n","      <td>1425941382</td>\n","      <td>82</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>1</td>\n","      <td>5577</td>\n","      <td>5.0</td>\n","      <td>1425941397</td>\n","      <td>97</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>25847468</th>\n","      <td>25847468</td>\n","      <td>26024229</td>\n","      <td>270896</td>\n","      <td>6870</td>\n","      <td>5.0</td>\n","      <td>1257034443</td>\n","      <td>3325</td>\n","    </tr>\n","    <tr>\n","      <th>25847469</th>\n","      <td>25847469</td>\n","      <td>26024124</td>\n","      <td>270896</td>\n","      <td>1676</td>\n","      <td>3.0</td>\n","      <td>1257034447</td>\n","      <td>3329</td>\n","    </tr>\n","    <tr>\n","      <th>25847470</th>\n","      <td>25847470</td>\n","      <td>26024103</td>\n","      <td>270896</td>\n","      <td>1230</td>\n","      <td>4.5</td>\n","      <td>1257034450</td>\n","      <td>3332</td>\n","    </tr>\n","    <tr>\n","      <th>25847471</th>\n","      <td>25847471</td>\n","      <td>26024130</td>\n","      <td>270896</td>\n","      <td>1777</td>\n","      <td>3.0</td>\n","      <td>1257034455</td>\n","      <td>3337</td>\n","    </tr>\n","    <tr>\n","      <th>25847472</th>\n","      <td>25847472</td>\n","      <td>26024138</td>\n","      <td>270896</td>\n","      <td>2001</td>\n","      <td>3.0</td>\n","      <td>1257034458</td>\n","      <td>3340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>25847473 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8393b041-3bd4-4400-887f-a05ce946616e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8393b041-3bd4-4400-887f-a05ce946616e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8393b041-3bd4-4400-887f-a05ce946616e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#Saco los ultimos tiempos de cada usuario\n","ultimos_tiempos = ratings.groupby('userId').last().reset_index()['Segundos']\n","ultimos_tiempos"],"metadata":{"id":"zFSSIDm2icN_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664214795996,"user_tz":180,"elapsed":2640,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"d658f97a-43f2-4ab8-8dcb-76ea1478e6b5"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0           1399\n","1           2131\n","2            218\n","3           7041\n","4            735\n","           ...  \n","233898      1020\n","233899    564620\n","233900      1396\n","233901      1735\n","233902      3340\n","Name: Segundos, Length: 233903, dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["ratings_por_usuario = ratings.groupby('userId').count().reset_index()\n","ratings_por_usuario = ratings_por_usuario[['userId','rating']]\n","ratings_por_usuario = ratings_por_usuario.rename(columns={'rating':'Cantidad de Ratings'})\n","ratings_por_usuario"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"tbNanKP0fxFf","executionInfo":{"status":"ok","timestamp":1664214797334,"user_tz":180,"elapsed":1341,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"4e096768-9085-4656-c95e-12fb41370584"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        userId  Cantidad de Ratings\n","0            1                   27\n","1            2                   22\n","2            3                   10\n","3            4                   62\n","4            5                   26\n","...        ...                  ...\n","233898  270892                   75\n","233899  270893                  190\n","233900  270894                  148\n","233901  270895                   20\n","233902  270896                  260\n","\n","[233903 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-cf99a80e-9c33-4423-937f-b2530b49f846\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>62</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>233898</th>\n","      <td>270892</td>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>233899</th>\n","      <td>270893</td>\n","      <td>190</td>\n","    </tr>\n","    <tr>\n","      <th>233900</th>\n","      <td>270894</td>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>233901</th>\n","      <td>270895</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>233902</th>\n","      <td>270896</td>\n","      <td>260</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>233903 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf99a80e-9c33-4423-937f-b2530b49f846')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cf99a80e-9c33-4423-937f-b2530b49f846 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cf99a80e-9c33-4423-937f-b2530b49f846');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["ratings_por_usuario['Ultimo tiempo'] = ultimos_tiempos\n","ratings_por_usuario"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"duMjlgfQmUHt","executionInfo":{"status":"ok","timestamp":1664214797335,"user_tz":180,"elapsed":8,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"bb5dd592-e333-4835-8e79-8947ad1485e6"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        userId  Cantidad de Ratings  Ultimo tiempo\n","0            1                   27           1399\n","1            2                   22           2131\n","2            3                   10            218\n","3            4                   62           7041\n","4            5                   26            735\n","...        ...                  ...            ...\n","233898  270892                   75           1020\n","233899  270893                  190         564620\n","233900  270894                  148           1396\n","233901  270895                   20           1735\n","233902  270896                  260           3340\n","\n","[233903 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-02ceb6f2-4241-4fad-97d4-ecad9d5e8bbf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>1399</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>22</td>\n","      <td>2131</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>218</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>62</td>\n","      <td>7041</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>735</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>233898</th>\n","      <td>270892</td>\n","      <td>75</td>\n","      <td>1020</td>\n","    </tr>\n","    <tr>\n","      <th>233899</th>\n","      <td>270893</td>\n","      <td>190</td>\n","      <td>564620</td>\n","    </tr>\n","    <tr>\n","      <th>233900</th>\n","      <td>270894</td>\n","      <td>148</td>\n","      <td>1396</td>\n","    </tr>\n","    <tr>\n","      <th>233901</th>\n","      <td>270895</td>\n","      <td>20</td>\n","      <td>1735</td>\n","    </tr>\n","    <tr>\n","      <th>233902</th>\n","      <td>270896</td>\n","      <td>260</td>\n","      <td>3340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>233903 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02ceb6f2-4241-4fad-97d4-ecad9d5e8bbf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-02ceb6f2-4241-4fad-97d4-ecad9d5e8bbf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02ceb6f2-4241-4fad-97d4-ecad9d5e8bbf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#Me descarto los usuarios que hayan hecho todas los ratings al mismo tiempo (dejandome los ultimos tiempos en 0) ya que no voy a poder calcularles\n","#ni su velocidad ni su aceleracion (v = (xf-xi)/t)\n","ratings_por_usuario = ratings_por_usuario[ratings_por_usuario['Ultimo tiempo']!=0]\n","ratings_por_usuario"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"T3ZcTiZRv6aR","executionInfo":{"status":"ok","timestamp":1664214797335,"user_tz":180,"elapsed":6,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"e8ed7688-a1b5-495b-dd33-586524172408"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        userId  Cantidad de Ratings  Ultimo tiempo\n","0            1                   27           1399\n","1            2                   22           2131\n","2            3                   10            218\n","3            4                   62           7041\n","4            5                   26            735\n","...        ...                  ...            ...\n","233898  270892                   75           1020\n","233899  270893                  190         564620\n","233900  270894                  148           1396\n","233901  270895                   20           1735\n","233902  270896                  260           3340\n","\n","[233394 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-7d652444-9ab3-4359-9a0c-1c0b9cc5da5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>1399</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>22</td>\n","      <td>2131</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>218</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>62</td>\n","      <td>7041</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>735</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>233898</th>\n","      <td>270892</td>\n","      <td>75</td>\n","      <td>1020</td>\n","    </tr>\n","    <tr>\n","      <th>233899</th>\n","      <td>270893</td>\n","      <td>190</td>\n","      <td>564620</td>\n","    </tr>\n","    <tr>\n","      <th>233900</th>\n","      <td>270894</td>\n","      <td>148</td>\n","      <td>1396</td>\n","    </tr>\n","    <tr>\n","      <th>233901</th>\n","      <td>270895</td>\n","      <td>20</td>\n","      <td>1735</td>\n","    </tr>\n","    <tr>\n","      <th>233902</th>\n","      <td>270896</td>\n","      <td>260</td>\n","      <td>3340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>233394 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d652444-9ab3-4359-9a0c-1c0b9cc5da5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7d652444-9ab3-4359-9a0c-1c0b9cc5da5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7d652444-9ab3-4359-9a0c-1c0b9cc5da5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#Le calculo la velocidad a cada usuario \n","ratings_por_usuario['Velocidad'] = ratings_por_usuario['Cantidad de Ratings']/ ratings_por_usuario['Ultimo tiempo']\n","ratings_por_usuario"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":528},"id":"1MI1ZkLimi82","executionInfo":{"status":"ok","timestamp":1664214802213,"user_tz":180,"elapsed":334,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"7ceed5bd-6e9a-4f3b-c53f-b785ee99ac4b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"]},{"output_type":"execute_result","data":{"text/plain":["        userId  Cantidad de Ratings  Ultimo tiempo  Velocidad\n","0            1                   27           1399   0.019299\n","1            2                   22           2131   0.010324\n","2            3                   10            218   0.045872\n","3            4                   62           7041   0.008806\n","4            5                   26            735   0.035374\n","...        ...                  ...            ...        ...\n","233898  270892                   75           1020   0.073529\n","233899  270893                  190         564620   0.000337\n","233900  270894                  148           1396   0.106017\n","233901  270895                   20           1735   0.011527\n","233902  270896                  260           3340   0.077844\n","\n","[233394 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-71630cb5-ac9c-451f-9457-ebee04e630ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","      <th>Velocidad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>1399</td>\n","      <td>0.019299</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>22</td>\n","      <td>2131</td>\n","      <td>0.010324</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>218</td>\n","      <td>0.045872</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>62</td>\n","      <td>7041</td>\n","      <td>0.008806</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>735</td>\n","      <td>0.035374</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>233898</th>\n","      <td>270892</td>\n","      <td>75</td>\n","      <td>1020</td>\n","      <td>0.073529</td>\n","    </tr>\n","    <tr>\n","      <th>233899</th>\n","      <td>270893</td>\n","      <td>190</td>\n","      <td>564620</td>\n","      <td>0.000337</td>\n","    </tr>\n","    <tr>\n","      <th>233900</th>\n","      <td>270894</td>\n","      <td>148</td>\n","      <td>1396</td>\n","      <td>0.106017</td>\n","    </tr>\n","    <tr>\n","      <th>233901</th>\n","      <td>270895</td>\n","      <td>20</td>\n","      <td>1735</td>\n","      <td>0.011527</td>\n","    </tr>\n","    <tr>\n","      <th>233902</th>\n","      <td>270896</td>\n","      <td>260</td>\n","      <td>3340</td>\n","      <td>0.077844</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>233394 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71630cb5-ac9c-451f-9457-ebee04e630ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-71630cb5-ac9c-451f-9457-ebee04e630ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-71630cb5-ac9c-451f-9457-ebee04e630ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["ratings_por_usuario.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"Q0QFWhVP0kcQ","executionInfo":{"status":"ok","timestamp":1664214804633,"user_tz":180,"elapsed":291,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"5471e773-e8be-4311-f49e-74fb02263e53"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              userId  Cantidad de Ratings  Ultimo tiempo     Velocidad\n","count  233394.000000        233394.000000   2.333940e+05  2.333940e+05\n","mean   135545.634356           110.718952   1.261245e+07  1.040879e-01\n","std     78148.336891           218.102921   4.928620e+07  1.649847e+00\n","min         1.000000            10.000000   1.000000e+00  2.443927e-08\n","25%     67790.250000            18.000000   3.960000e+02  2.765107e-04\n","50%    135658.500000            40.000000   1.452000e+03  3.030303e-02\n","75%    203228.750000           110.000000   3.481882e+05  6.983486e-02\n","max    270896.000000         18276.000000   6.273836e+08  2.690000e+02"],"text/html":["\n","  <div id=\"df-dfed0256-5b05-4f95-99f9-fdd5f42aae47\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","      <th>Velocidad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>233394.000000</td>\n","      <td>233394.000000</td>\n","      <td>2.333940e+05</td>\n","      <td>2.333940e+05</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>135545.634356</td>\n","      <td>110.718952</td>\n","      <td>1.261245e+07</td>\n","      <td>1.040879e-01</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>78148.336891</td>\n","      <td>218.102921</td>\n","      <td>4.928620e+07</td>\n","      <td>1.649847e+00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>10.000000</td>\n","      <td>1.000000e+00</td>\n","      <td>2.443927e-08</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>67790.250000</td>\n","      <td>18.000000</td>\n","      <td>3.960000e+02</td>\n","      <td>2.765107e-04</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>135658.500000</td>\n","      <td>40.000000</td>\n","      <td>1.452000e+03</td>\n","      <td>3.030303e-02</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>203228.750000</td>\n","      <td>110.000000</td>\n","      <td>3.481882e+05</td>\n","      <td>6.983486e-02</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>270896.000000</td>\n","      <td>18276.000000</td>\n","      <td>6.273836e+08</td>\n","      <td>2.690000e+02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfed0256-5b05-4f95-99f9-fdd5f42aae47')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dfed0256-5b05-4f95-99f9-fdd5f42aae47 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dfed0256-5b05-4f95-99f9-fdd5f42aae47');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#Calculamos asi la aceleracion ya que suponemos que la velocidad con la que un usuario comienza a hacer ratings es 0\n","ratings_por_usuario['Aceleracion'] = ratings_por_usuario['Velocidad']/ratings_por_usuario['Ultimo tiempo']\n","ratings_por_usuario"],"metadata":{"id":"2YjxwYJYnq4t","colab":{"base_uri":"https://localhost:8080/","height":528},"executionInfo":{"status":"ok","timestamp":1664214806079,"user_tz":180,"elapsed":4,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"97b980ef-bbbb-4081-8ff2-695c9970e8c3"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"]},{"output_type":"execute_result","data":{"text/plain":["        userId  Cantidad de Ratings  Ultimo tiempo  Velocidad   Aceleracion\n","0            1                   27           1399   0.019299  1.379521e-05\n","1            2                   22           2131   0.010324  4.844576e-06\n","2            3                   10            218   0.045872  2.104200e-04\n","3            4                   62           7041   0.008806  1.250613e-06\n","4            5                   26            735   0.035374  4.812809e-05\n","...        ...                  ...            ...        ...           ...\n","233898  270892                   75           1020   0.073529  7.208766e-05\n","233899  270893                  190         564620   0.000337  5.959929e-10\n","233900  270894                  148           1396   0.106017  7.594355e-05\n","233901  270895                   20           1735   0.011527  6.644022e-06\n","233902  270896                  260           3340   0.077844  2.330668e-05\n","\n","[233394 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-1366e886-4f4c-48ef-8333-a3bd389bfd40\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","      <th>Velocidad</th>\n","      <th>Aceleracion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>1399</td>\n","      <td>0.019299</td>\n","      <td>1.379521e-05</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>22</td>\n","      <td>2131</td>\n","      <td>0.010324</td>\n","      <td>4.844576e-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>218</td>\n","      <td>0.045872</td>\n","      <td>2.104200e-04</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>62</td>\n","      <td>7041</td>\n","      <td>0.008806</td>\n","      <td>1.250613e-06</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>735</td>\n","      <td>0.035374</td>\n","      <td>4.812809e-05</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>233898</th>\n","      <td>270892</td>\n","      <td>75</td>\n","      <td>1020</td>\n","      <td>0.073529</td>\n","      <td>7.208766e-05</td>\n","    </tr>\n","    <tr>\n","      <th>233899</th>\n","      <td>270893</td>\n","      <td>190</td>\n","      <td>564620</td>\n","      <td>0.000337</td>\n","      <td>5.959929e-10</td>\n","    </tr>\n","    <tr>\n","      <th>233900</th>\n","      <td>270894</td>\n","      <td>148</td>\n","      <td>1396</td>\n","      <td>0.106017</td>\n","      <td>7.594355e-05</td>\n","    </tr>\n","    <tr>\n","      <th>233901</th>\n","      <td>270895</td>\n","      <td>20</td>\n","      <td>1735</td>\n","      <td>0.011527</td>\n","      <td>6.644022e-06</td>\n","    </tr>\n","    <tr>\n","      <th>233902</th>\n","      <td>270896</td>\n","      <td>260</td>\n","      <td>3340</td>\n","      <td>0.077844</td>\n","      <td>2.330668e-05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>233394 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1366e886-4f4c-48ef-8333-a3bd389bfd40')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1366e886-4f4c-48ef-8333-a3bd389bfd40 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1366e886-4f4c-48ef-8333-a3bd389bfd40');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["ratings_por_usuario.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"rdQT-YZIgyFd","executionInfo":{"status":"ok","timestamp":1664214807301,"user_tz":180,"elapsed":4,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"dd2128de-bc54-4168-b353-41ddf98fccbb"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              userId  Cantidad de Ratings  Ultimo tiempo     Velocidad  \\\n","count  233394.000000        233394.000000   2.333940e+05  2.333940e+05   \n","mean   135545.634356           110.718952   1.261245e+07  1.040879e-01   \n","std     78148.336891           218.102921   4.928620e+07  1.649847e+00   \n","min         1.000000            10.000000   1.000000e+00  2.443927e-08   \n","25%     67790.250000            18.000000   3.960000e+02  2.765107e-04   \n","50%    135658.500000            40.000000   1.452000e+03  3.030303e-02   \n","75%    203228.750000           110.000000   3.481882e+05  6.983486e-02   \n","max    270896.000000         18276.000000   6.273836e+08  2.690000e+02   \n","\n","        Aceleracion  \n","count  2.333940e+05  \n","mean   3.784450e-02  \n","std    1.067220e+00  \n","min    5.429801e-17  \n","25%    7.939487e-10  \n","50%    2.288048e-05  \n","75%    1.547974e-04  \n","max    1.345000e+02  "],"text/html":["\n","  <div id=\"df-39adcc13-1886-401e-9ce2-e06168acf1c0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>Cantidad de Ratings</th>\n","      <th>Ultimo tiempo</th>\n","      <th>Velocidad</th>\n","      <th>Aceleracion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>233394.000000</td>\n","      <td>233394.000000</td>\n","      <td>2.333940e+05</td>\n","      <td>2.333940e+05</td>\n","      <td>2.333940e+05</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>135545.634356</td>\n","      <td>110.718952</td>\n","      <td>1.261245e+07</td>\n","      <td>1.040879e-01</td>\n","      <td>3.784450e-02</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>78148.336891</td>\n","      <td>218.102921</td>\n","      <td>4.928620e+07</td>\n","      <td>1.649847e+00</td>\n","      <td>1.067220e+00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>10.000000</td>\n","      <td>1.000000e+00</td>\n","      <td>2.443927e-08</td>\n","      <td>5.429801e-17</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>67790.250000</td>\n","      <td>18.000000</td>\n","      <td>3.960000e+02</td>\n","      <td>2.765107e-04</td>\n","      <td>7.939487e-10</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>135658.500000</td>\n","      <td>40.000000</td>\n","      <td>1.452000e+03</td>\n","      <td>3.030303e-02</td>\n","      <td>2.288048e-05</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>203228.750000</td>\n","      <td>110.000000</td>\n","      <td>3.481882e+05</td>\n","      <td>6.983486e-02</td>\n","      <td>1.547974e-04</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>270896.000000</td>\n","      <td>18276.000000</td>\n","      <td>6.273836e+08</td>\n","      <td>2.690000e+02</td>\n","      <td>1.345000e+02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39adcc13-1886-401e-9ce2-e06168acf1c0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-39adcc13-1886-401e-9ce2-e06168acf1c0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-39adcc13-1886-401e-9ce2-e06168acf1c0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["correlacionVelocidadAceleracion = ratings_por_usuario.corr()['Aceleracion']['Velocidad']\n","correlacionVelocidadAceleracion"],"metadata":{"id":"Ak-SOvrxhCge","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664214808718,"user_tz":180,"elapsed":2,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"975b1e99-6ec7-4b5d-aca8-0a4053a22e97"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8137501096522644"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt #Pylplot te permite hacer cosas sencillas\n","import seaborn as sns #Seaborn ter permite hacer cosas mas chetas"],"metadata":{"id":"k9ScSLBTw5aJ","executionInfo":{"status":"ok","timestamp":1664214811220,"user_tz":180,"elapsed":1125,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["plt.figure(dpi=150)\n","sns.scatterplot(data=ratings_por_usuario, x=\"Velocidad\", y=\"Aceleracion\")\n","plt.title('Aceleracion vs Velocidad')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":611},"id":"BZNoGGXQxvj4","executionInfo":{"status":"ok","timestamp":1664214816731,"user_tz":180,"elapsed":2699,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"8a7d79c3-33f4-4f0c-bc4b-fda9de0b2f60"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Aceleracion vs Velocidad')"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["velocidadPromedio = ratings_por_usuario['Velocidad'].mean()\n","velocidadPromedio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y50Boj1Dx4bY","executionInfo":{"status":"ok","timestamp":1664214816731,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"2b857c0c-9569-459d-9e53-b87a0105ae88"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.10408792583926745"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["aceleracionPromedio = ratings_por_usuario['Aceleracion'].mean()\n","aceleracionPromedio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_YpG3EHeyUlg","executionInfo":{"status":"ok","timestamp":1664214818281,"user_tz":180,"elapsed":2,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"bb666872-d97f-4c3c-e7e4-938d61d99485"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.037844497137089456"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["def Q(tiempo):\n","  return (1 + velocidadPromedio*tiempo + 1/2*aceleracionPromedio*tiempo**2)"],"metadata":{"id":"BuUpyoUxyXAw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(dpi=150)\n","x = range(0, 40000000) #Le pongo maso menos un año de duracion\n","plt.plot(x, [Q(i) for i in x])\n","plt.title('Modelo MRUV tomando velocidad y aceleracion promedio\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":637},"id":"D4yrtDyzyy1G","executionInfo":{"status":"ok","timestamp":1664211812320,"user_tz":180,"elapsed":64082,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"87d5231d-2129-4ae5-f6c9-b2f4992c0425"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Modelo MRUV tomando velocidad y aceleracion promedio\\n')"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(dpi=150)\n","x = range(0, 864000) #Le pongo maso menos un año de duracion\n","plt.plot(x, [Q(i) for i in x])\n","plt.title('Modelo MRUV tomando velocidad y aceleracion promedio\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":610},"id":"LkZpUkqOvoGj","executionInfo":{"status":"ok","timestamp":1664211868395,"user_tz":180,"elapsed":4124,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"7f5b3214-3f89-46eb-b037-d9838304636a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Modelo MRUV tomando velocidad y aceleracion promedio\\n')"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["listaDeUsuarios = list(ratings['userId'].unique())\n","listaDeUsuarios"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lpq5izBKzEEw","executionInfo":{"status":"ok","timestamp":1664214822803,"user_tz":180,"elapsed":274,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"580e9cc5-ff86-40ac-8099-06df273f16aa"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 2,\n"," 3,\n"," 4,\n"," 5,\n"," 7,\n"," 8,\n"," 9,\n"," 10,\n"," 11,\n"," 12,\n"," 13,\n"," 15,\n"," 16,\n"," 17,\n"," 19,\n"," 20,\n"," 21,\n"," 22,\n"," 23,\n"," 24,\n"," 25,\n"," 27,\n"," 28,\n"," 29,\n"," 30,\n"," 32,\n"," 33,\n"," 34,\n"," 35,\n"," 36,\n"," 37,\n"," 38,\n"," 40,\n"," 41,\n"," 43,\n"," 44,\n"," 46,\n"," 47,\n"," 48,\n"," 49,\n"," 50,\n"," 51,\n"," 52,\n"," 53,\n"," 54,\n"," 55,\n"," 56,\n"," 57,\n"," 58,\n"," 59,\n"," 60,\n"," 61,\n"," 62,\n"," 63,\n"," 64,\n"," 65,\n"," 66,\n"," 67,\n"," 68,\n"," 69,\n"," 70,\n"," 71,\n"," 72,\n"," 73,\n"," 74,\n"," 75,\n"," 76,\n"," 77,\n"," 78,\n"," 79,\n"," 80,\n"," 81,\n"," 82,\n"," 83,\n"," 84,\n"," 86,\n"," 87,\n"," 88,\n"," 89,\n"," 90,\n"," 91,\n"," 93,\n"," 94,\n"," 95,\n"," 96,\n"," 97,\n"," 98,\n"," 99,\n"," 101,\n"," 102,\n"," 103,\n"," 104,\n"," 105,\n"," 106,\n"," 107,\n"," 109,\n"," 111,\n"," 112,\n"," 114,\n"," 115,\n"," 116,\n"," 117,\n"," 118,\n"," 119,\n"," 120,\n"," 122,\n"," 123,\n"," 124,\n"," 125,\n"," 126,\n"," 127,\n"," 128,\n"," 129,\n"," 131,\n"," 132,\n"," 133,\n"," 134,\n"," 135,\n"," 136,\n"," 137,\n"," 138,\n"," 139,\n"," 140,\n"," 141,\n"," 142,\n"," 144,\n"," 146,\n"," 147,\n"," 148,\n"," 150,\n"," 151,\n"," 153,\n"," 155,\n"," 156,\n"," 157,\n"," 158,\n"," 159,\n"," 160,\n"," 161,\n"," 162,\n"," 163,\n"," 164,\n"," 165,\n"," 166,\n"," 167,\n"," 168,\n"," 169,\n"," 170,\n"," 171,\n"," 173,\n"," 174,\n"," 176,\n"," 178,\n"," 179,\n"," 180,\n"," 181,\n"," 182,\n"," 184,\n"," 185,\n"," 186,\n"," 187,\n"," 188,\n"," 189,\n"," 190,\n"," 191,\n"," 192,\n"," 193,\n"," 194,\n"," 195,\n"," 196,\n"," 197,\n"," 198,\n"," 199,\n"," 200,\n"," 201,\n"," 204,\n"," 206,\n"," 207,\n"," 209,\n"," 210,\n"," 211,\n"," 212,\n"," 213,\n"," 215,\n"," 216,\n"," 217,\n"," 218,\n"," 219,\n"," 220,\n"," 221,\n"," 222,\n"," 223,\n"," 224,\n"," 225,\n"," 226,\n"," 227,\n"," 228,\n"," 229,\n"," 230,\n"," 231,\n"," 232,\n"," 233,\n"," 234,\n"," 235,\n"," 236,\n"," 240,\n"," 241,\n"," 242,\n"," 244,\n"," 245,\n"," 246,\n"," 247,\n"," 248,\n"," 249,\n"," 250,\n"," 251,\n"," 252,\n"," 253,\n"," 254,\n"," 255,\n"," 256,\n"," 259,\n"," 260,\n"," 261,\n"," 262,\n"," 264,\n"," 265,\n"," 266,\n"," 267,\n"," 269,\n"," 270,\n"," 271,\n"," 272,\n"," 273,\n"," 274,\n"," 275,\n"," 276,\n"," 277,\n"," 279,\n"," 280,\n"," 281,\n"," 284,\n"," 285,\n"," 286,\n"," 287,\n"," 288,\n"," 289,\n"," 290,\n"," 291,\n"," 292,\n"," 293,\n"," 294,\n"," 295,\n"," 296,\n"," 297,\n"," 298,\n"," 299,\n"," 302,\n"," 303,\n"," 305,\n"," 306,\n"," 307,\n"," 308,\n"," 309,\n"," 310,\n"," 311,\n"," 312,\n"," 313,\n"," 314,\n"," 315,\n"," 316,\n"," 317,\n"," 318,\n"," 319,\n"," 320,\n"," 321,\n"," 322,\n"," 323,\n"," 324,\n"," 325,\n"," 326,\n"," 329,\n"," 330,\n"," 331,\n"," 332,\n"," 334,\n"," 335,\n"," 336,\n"," 337,\n"," 338,\n"," 340,\n"," 341,\n"," 342,\n"," 343,\n"," 344,\n"," 345,\n"," 346,\n"," 348,\n"," 349,\n"," 350,\n"," 352,\n"," 353,\n"," 354,\n"," 355,\n"," 356,\n"," 357,\n"," 358,\n"," 359,\n"," 360,\n"," 361,\n"," 362,\n"," 363,\n"," 364,\n"," 365,\n"," 366,\n"," 367,\n"," 368,\n"," 369,\n"," 370,\n"," 371,\n"," 372,\n"," 374,\n"," 375,\n"," 376,\n"," 377,\n"," 378,\n"," 380,\n"," 382,\n"," 384,\n"," 386,\n"," 387,\n"," 388,\n"," 389,\n"," 390,\n"," 391,\n"," 392,\n"," 393,\n"," 395,\n"," 397,\n"," 398,\n"," 400,\n"," 401,\n"," 403,\n"," 404,\n"," 405,\n"," 406,\n"," 407,\n"," 408,\n"," 410,\n"," 411,\n"," 412,\n"," 413,\n"," 414,\n"," 415,\n"," 416,\n"," 417,\n"," 418,\n"," 419,\n"," 420,\n"," 421,\n"," 422,\n"," 423,\n"," 425,\n"," 426,\n"," 427,\n"," 428,\n"," 429,\n"," 430,\n"," 431,\n"," 432,\n"," 433,\n"," 434,\n"," 435,\n"," 436,\n"," 438,\n"," 439,\n"," 440,\n"," 442,\n"," 443,\n"," 445,\n"," 447,\n"," 448,\n"," 450,\n"," 451,\n"," 452,\n"," 453,\n"," 454,\n"," 455,\n"," 456,\n"," 457,\n"," 458,\n"," 459,\n"," 460,\n"," 461,\n"," 463,\n"," 464,\n"," 465,\n"," 466,\n"," 468,\n"," 469,\n"," 470,\n"," 471,\n"," 472,\n"," 474,\n"," 475,\n"," 476,\n"," 477,\n"," 478,\n"," 479,\n"," 480,\n"," 481,\n"," 482,\n"," 483,\n"," 485,\n"," 487,\n"," 488,\n"," 489,\n"," 490,\n"," 491,\n"," 492,\n"," 493,\n"," 494,\n"," 495,\n"," 496,\n"," 497,\n"," 498,\n"," 499,\n"," 500,\n"," 501,\n"," 502,\n"," 503,\n"," 504,\n"," 505,\n"," 506,\n"," 507,\n"," 508,\n"," 509,\n"," 510,\n"," 511,\n"," 512,\n"," 513,\n"," 514,\n"," 515,\n"," 516,\n"," 517,\n"," 518,\n"," 519,\n"," 520,\n"," 521,\n"," 522,\n"," 523,\n"," 524,\n"," 526,\n"," 527,\n"," 528,\n"," 529,\n"," 530,\n"," 533,\n"," 534,\n"," 535,\n"," 536,\n"," 537,\n"," 538,\n"," 539,\n"," 540,\n"," 541,\n"," 542,\n"," 543,\n"," 544,\n"," 545,\n"," 546,\n"," 548,\n"," 549,\n"," 550,\n"," 551,\n"," 552,\n"," 553,\n"," 554,\n"," 555,\n"," 556,\n"," 557,\n"," 558,\n"," 559,\n"," 561,\n"," 563,\n"," 564,\n"," 565,\n"," 567,\n"," 568,\n"," 570,\n"," 572,\n"," 573,\n"," 574,\n"," 575,\n"," 576,\n"," 578,\n"," 579,\n"," 580,\n"," 581,\n"," 582,\n"," 583,\n"," 584,\n"," 585,\n"," 586,\n"," 587,\n"," 588,\n"," 590,\n"," 592,\n"," 593,\n"," 595,\n"," 596,\n"," 597,\n"," 598,\n"," 599,\n"," 600,\n"," 602,\n"," 603,\n"," 604,\n"," 605,\n"," 606,\n"," 607,\n"," 608,\n"," 609,\n"," 611,\n"," 613,\n"," 614,\n"," 615,\n"," 616,\n"," 618,\n"," 619,\n"," 620,\n"," 621,\n"," 622,\n"," 623,\n"," 624,\n"," 625,\n"," 627,\n"," 628,\n"," 629,\n"," 630,\n"," 631,\n"," 632,\n"," 633,\n"," 635,\n"," 636,\n"," 637,\n"," 638,\n"," 640,\n"," 641,\n"," 643,\n"," 645,\n"," 646,\n"," 647,\n"," 648,\n"," 651,\n"," 652,\n"," 653,\n"," 654,\n"," 656,\n"," 658,\n"," 659,\n"," 660,\n"," 661,\n"," 663,\n"," 664,\n"," 667,\n"," 668,\n"," 669,\n"," 671,\n"," 672,\n"," 673,\n"," 674,\n"," 675,\n"," 676,\n"," 677,\n"," 678,\n"," 679,\n"," 680,\n"," 681,\n"," 682,\n"," 684,\n"," 685,\n"," 686,\n"," 687,\n"," 688,\n"," 689,\n"," 690,\n"," 691,\n"," 692,\n"," 694,\n"," 697,\n"," 698,\n"," 699,\n"," 700,\n"," 701,\n"," 702,\n"," 703,\n"," 704,\n"," 706,\n"," 707,\n"," 708,\n"," 710,\n"," 711,\n"," 713,\n"," 714,\n"," 715,\n"," 717,\n"," 718,\n"," 719,\n"," 720,\n"," 721,\n"," 722,\n"," 724,\n"," 725,\n"," 726,\n"," 727,\n"," 728,\n"," 729,\n"," 730,\n"," 731,\n"," 732,\n"," 733,\n"," 735,\n"," 736,\n"," 738,\n"," 739,\n"," 740,\n"," 741,\n"," 742,\n"," 743,\n"," 744,\n"," 745,\n"," 746,\n"," 747,\n"," 748,\n"," 749,\n"," 750,\n"," 751,\n"," 752,\n"," 753,\n"," 754,\n"," 755,\n"," 757,\n"," 758,\n"," 759,\n"," 760,\n"," 761,\n"," 762,\n"," 763,\n"," 764,\n"," 765,\n"," 766,\n"," 767,\n"," 768,\n"," 769,\n"," 772,\n"," 773,\n"," 774,\n"," 775,\n"," 776,\n"," 777,\n"," 778,\n"," 779,\n"," 780,\n"," 781,\n"," 782,\n"," 783,\n"," 784,\n"," 785,\n"," 786,\n"," 788,\n"," 789,\n"," 790,\n"," 791,\n"," 792,\n"," 793,\n"," 794,\n"," 795,\n"," 796,\n"," 797,\n"," 798,\n"," 799,\n"," 800,\n"," 801,\n"," 802,\n"," 803,\n"," 804,\n"," 805,\n"," 806,\n"," 807,\n"," 808,\n"," 809,\n"," 810,\n"," 811,\n"," 812,\n"," 813,\n"," 814,\n"," 815,\n"," 816,\n"," 817,\n"," 818,\n"," 819,\n"," 821,\n"," 822,\n"," 823,\n"," 824,\n"," 825,\n"," 826,\n"," 828,\n"," 829,\n"," 830,\n"," 831,\n"," 832,\n"," 834,\n"," 835,\n"," 836,\n"," 837,\n"," 838,\n"," 839,\n"," 840,\n"," 841,\n"," 842,\n"," 843,\n"," 844,\n"," 845,\n"," 846,\n"," 847,\n"," 848,\n"," 849,\n"," 850,\n"," 851,\n"," 852,\n"," 853,\n"," 854,\n"," 856,\n"," 857,\n"," 858,\n"," 859,\n"," 860,\n"," 862,\n"," 863,\n"," 864,\n"," 865,\n"," 866,\n"," 867,\n"," 869,\n"," 870,\n"," 871,\n"," 872,\n"," 873,\n"," 874,\n"," 875,\n"," 876,\n"," 877,\n"," 878,\n"," 879,\n"," 880,\n"," 881,\n"," 882,\n"," 883,\n"," 884,\n"," 885,\n"," 886,\n"," 887,\n"," 888,\n"," 889,\n"," 890,\n"," 891,\n"," 892,\n"," 893,\n"," 894,\n"," 896,\n"," 898,\n"," 900,\n"," 902,\n"," 903,\n"," 904,\n"," 906,\n"," 908,\n"," 909,\n"," 910,\n"," 911,\n"," 913,\n"," 914,\n"," 915,\n"," 916,\n"," 917,\n"," 918,\n"," 920,\n"," 921,\n"," 922,\n"," 924,\n"," 925,\n"," 926,\n"," 927,\n"," 929,\n"," 930,\n"," 931,\n"," 932,\n"," 933,\n"," 934,\n"," 936,\n"," 937,\n"," 940,\n"," 941,\n"," 942,\n"," 943,\n"," 947,\n"," 948,\n"," 949,\n"," 950,\n"," 951,\n"," 952,\n"," 953,\n"," 954,\n"," 955,\n"," 956,\n"," 957,\n"," 958,\n"," 959,\n"," 960,\n"," 961,\n"," 962,\n"," 963,\n"," 964,\n"," 965,\n"," 966,\n"," 967,\n"," 968,\n"," 969,\n"," 971,\n"," 974,\n"," 975,\n"," 978,\n"," 979,\n"," 981,\n"," 982,\n"," 983,\n"," 984,\n"," 985,\n"," 986,\n"," 987,\n"," 988,\n"," 989,\n"," 990,\n"," 991,\n"," 992,\n"," 993,\n"," 994,\n"," 996,\n"," 997,\n"," 998,\n"," 999,\n"," 1001,\n"," 1002,\n"," 1003,\n"," 1004,\n"," 1005,\n"," 1006,\n"," 1008,\n"," 1009,\n"," 1010,\n"," 1011,\n"," 1012,\n"," 1013,\n"," 1014,\n"," 1015,\n"," 1016,\n"," 1017,\n"," 1018,\n"," 1019,\n"," 1020,\n"," 1021,\n"," 1023,\n"," 1025,\n"," 1026,\n"," 1027,\n"," 1029,\n"," 1030,\n"," 1031,\n"," 1033,\n"," 1034,\n"," 1035,\n"," 1036,\n"," 1037,\n"," 1038,\n"," 1039,\n"," 1040,\n"," 1041,\n"," 1044,\n"," 1045,\n"," 1046,\n"," 1047,\n"," 1048,\n"," 1049,\n"," 1050,\n"," 1051,\n"," 1052,\n"," 1053,\n"," 1054,\n"," 1055,\n"," 1056,\n"," 1057,\n"," 1058,\n"," 1059,\n"," 1060,\n"," 1061,\n"," 1062,\n"," 1063,\n"," 1064,\n"," 1065,\n"," 1066,\n"," 1067,\n"," 1068,\n"," 1069,\n"," 1070,\n"," 1071,\n"," 1072,\n"," 1073,\n"," 1074,\n"," 1075,\n"," 1076,\n"," 1078,\n"," 1079,\n"," 1080,\n"," 1082,\n"," 1083,\n"," 1084,\n"," 1087,\n"," 1088,\n"," 1090,\n"," 1091,\n"," 1092,\n"," 1093,\n"," 1095,\n"," 1096,\n"," 1097,\n"," 1098,\n"," 1100,\n"," 1102,\n"," 1103,\n"," 1104,\n"," 1105,\n"," 1106,\n"," 1107,\n"," 1108,\n"," 1109,\n"," 1110,\n"," 1111,\n"," 1112,\n"," 1113,\n"," 1114,\n"," 1115,\n"," 1116,\n"," 1117,\n"," 1118,\n"," 1119,\n"," 1120,\n"," 1121,\n"," 1122,\n"," 1124,\n"," 1125,\n"," 1126,\n"," 1128,\n"," 1129,\n"," 1130,\n"," 1131,\n"," 1132,\n"," 1133,\n"," 1134,\n"," 1135,\n"," 1136,\n"," 1138,\n"," 1139,\n"," 1140,\n"," 1141,\n"," 1142,\n"," 1143,\n"," 1144,\n"," 1145,\n"," 1147,\n"," 1148,\n"," 1149,\n"," 1150,\n"," 1151,\n"," 1152,\n"," 1153,\n"," 1154,\n"," 1155,\n"," 1156,\n"," 1158,\n"," 1159,\n"," 1160,\n"," 1161,\n"," 1162,\n"," 1163,\n"," 1164,\n"," 1165,\n"," 1166,\n"," ...]"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["import random\n","usuariosRandom = random.sample(listaDeUsuarios, 100)\n","usuariosRandom"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9cYs8hrAAf1l","executionInfo":{"status":"ok","timestamp":1664214823820,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"97911742-28d2-452f-dc5f-4e90f950c98e"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[187386,\n"," 170971,\n"," 162839,\n"," 99315,\n"," 158909,\n"," 174471,\n"," 244894,\n"," 48868,\n"," 23615,\n"," 29561,\n"," 212448,\n"," 241314,\n"," 73024,\n"," 152603,\n"," 47199,\n"," 265151,\n"," 202319,\n"," 11442,\n"," 63954,\n"," 139184,\n"," 164798,\n"," 79309,\n"," 89298,\n"," 199384,\n"," 67728,\n"," 42779,\n"," 183008,\n"," 166991,\n"," 227323,\n"," 65132,\n"," 20190,\n"," 10176,\n"," 74610,\n"," 90604,\n"," 227733,\n"," 29436,\n"," 11056,\n"," 253007,\n"," 171670,\n"," 214097,\n"," 117667,\n"," 19901,\n"," 39516,\n"," 110399,\n"," 72749,\n"," 59469,\n"," 45593,\n"," 225056,\n"," 131646,\n"," 177402,\n"," 52033,\n"," 260273,\n"," 101644,\n"," 63529,\n"," 139864,\n"," 126247,\n"," 137718,\n"," 256145,\n"," 218344,\n"," 188304,\n"," 75557,\n"," 33874,\n"," 50959,\n"," 213708,\n"," 268827,\n"," 149269,\n"," 112356,\n"," 91489,\n"," 263004,\n"," 256369,\n"," 104290,\n"," 5195,\n"," 245159,\n"," 124787,\n"," 183408,\n"," 4279,\n"," 61188,\n"," 142624,\n"," 224969,\n"," 153713,\n"," 208218,\n"," 184592,\n"," 141545,\n"," 101491,\n"," 154798,\n"," 114160,\n"," 221009,\n"," 161350,\n"," 163053,\n"," 241990,\n"," 168644,\n"," 79644,\n"," 29756,\n"," 7921,\n"," 106768,\n"," 115151,\n"," 133589,\n"," 152250,\n"," 177335,\n"," 120515]"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["#Grafico para distintos rangos de tiempos. En princpio para el mismo tiempo que hicimos Q(t)\n","plt.figure(dpi=150)\n","for usuarios in usuariosRandom:\n","  user = ratings[ratings['userId']==usuarios]\n","  listaRatings = []\n","  user['numeroRating'] = np.arange(1,len(user['movieId'])+1).tolist()\n","  sns.lineplot(x=\"Segundos\",y='numeroRating',data=user)\n","  plt.xlim((0,1000))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"qEWkeAVu_gtC","executionInfo":{"status":"ok","timestamp":1664215019898,"user_tz":180,"elapsed":31437,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"610df98d-8b70-4d9b-f6c9-c65fc22c0b8b"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1EAAAIhCAYAAACv0DDfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAXEQAAFxEByibzPwAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeZRlZX3v//f3nJp6gqZtJhkVUQMGnGcRBb0axRFj4nUZ0UQzKVHUmOsQp5tcjeIQ9ef1qkBucnNjEAfEa5QQFAVDEqJGMDKoQDNI03PNw/n+/ti7qk8fq6pr02dXdXW9X2ud9ez97OfZz95rta768Oz97MhMJEmSJEkL01jqC5AkSZKk5cQQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVdCz1Beg+yYi7gZWA7cv9bVIkiRJXXIMMJyZRyz1hcwnMnOpr0H3QUTs7O/vX3fCCScs9aVIkiRJXXHLLbcwNja2KzMPWuprmY8zUcvX7SeccMJJ119//VJfhyRJktQVJ598MjfccMN+/6SV70RJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVLNsQFRGPioi3RsQlEbEpIjIico62jYh4SkR8ICL+LSJ2RcRYRNwSEZ+KiAfsZawnRcTXImJrRAxGxLUR8Yq99Dk6Ii6IiDsjYjQiboyId0fEwL7ctyRJkqSl1bPUF7AP3gE8f4FtHwh8u9y+G7gCmAIeC7wWeFlE/FpmfqezY0S8GPg7isD5beBe4Azgoog4JTPfNEufBwHXABuBHwFXAY8G3gmcERFnZObYQm9UkiRJ0v5j2c5EUYSU9wLPA44E5gslCXyTIvzcPzOfn5kvAk4ALgTWAX8TEb3tnSJiA/A5oAmcnZmnZ+bZwEOBm4HzIuL0Wca7kCJAfSwzfzUzXwo8BPgi8CTgT+7LDUuSJElaess2RGXm+zPznZl5aWbevZe2t2TmMzPziszMtvox4PeBHcCxwBM7uv42cBDw5cy8pK3fL4C3lLvntXeIiMdSBKV72tqQmZPA7wETwOsjYjnPAkqSJEkr1rINUd2SmSPAjeXu/TsOP6csL56l62XAKHBmx3tO030u7XxkrwxfVwGHAE/el+uWJEmStDRWfIiKiAZwXLnbOaN1alle19kvM8cp3ncaAB68kD4d9adUvlhJkiRJS85HyuA3gcOAzcDV05URcRBwcLm7aY6+mygWjDgO+GFZd+wC+sDu4DaviLh+jkMnLKS/JEmSpO5a0TNREXEM8JFy950dj9+tbdsenuMUQ2W5bpZ+VfpIkiRJWiZW7ExURKwBLqFYRe9LmfmpJb6kWWXmybPVlzNUJy3y5UiSJEkr3oqciSqXMv97ikfxvgO8bJZmg23bq+c41Zqy3DVLvyp9JEmSJC0TKy5ElQtJXAQ8G/g+cFa5Qt8eMnMnxdLnAEfPcbrp+lvb6m67D30kSZIkLRMrLkQBf0mxmMSNwH/JzO3ztP1BWT6y80A5m/UwimXOb1xIn476H85xXJIkSdJ+bEWFqIh4H8XHdW8DnpGZ9+yly2VlefYsx55Lsbz55Zk5OkufsyKiv2P8w4GnANuA71a8fEmSJEn7gRUToiLiDcDbKL4FdWZm3raXLgCfAXYCz4+IF7Wd6zDgA+Xuh9o7ZOa1FAHpMOD9bX16gE8CvcDHMnPivt+NJEmSpKWybFfni4jnAO9oq+or67/XVvfezLwsIh7O7rDzM+BtETHbaT+Tmd+Z3snMrRHxKuDzwMURcSWwBTgTWA+cn5lXznKec4BrgHMj4unADcBjgAdSfIvqz6vdrSRJkqT9xbINUcChwONmqX9cRxsoAs90anpC+ZvNlRSr9c3IzC9ExGnA24HHU4S1G4CPZ+ZFs50kM2+KiEcA7wGeBbyQ4hHC9wJ/1vE9KkmSJEnLyLINUZl5IXDhAtteye4QdV/G+i7Fan5V+txOMSMlSZIk6QCyYt6JkiRJkqRuMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqYNmGqIh4VES8NSIuiYhNEZERkQvo98qIuDYiBiNia0R8LSKeuJc+TyrbbS37XRsRr9hLn6Mj4oKIuDMiRiPixoh4d0QMVL1XSZIkSfuPnqW+gH3wDuD5VTpExEeAc4ER4BvAAPAM4JkRcXZmfmmWPi8G/o4icH4buBc4A7goIk7JzDfN0udBwDXARuBHwFXAo4F3AmdExBmZOVbl2iVJkiTtH5btTBRFSHkv8DzgSGDeUBIRZ1IEqC3AqZn5gsx8FnAaMAVcEBHrO/psAD4HNIGzM/P0zDwbeChwM3BeRJw+y3AXUgSoj2Xmr2bmS4GHAF8EngT8yX26Y0mSJElLbtmGqMx8f2a+MzMvzcy7F9DljWX5vsy8qe081wCfAtYDr+7o89vAQcCXM/OStj6/AN5S7p7X3iEiHksRlO5pa0NmTgK/B0wAr4+I5TwLKEmSJK1YyzZEVRERq4Cnl7sXz9Jkuu6sjvrnzNPnMmAUOLPjPafpPpd2PrJXhq+rgEOAJy/s6iVJkiTtT1ZEiKJ4lK4f2JyZm2Y5fl1ZntJRf2rH8RmZOU7xvtMA8OCF9NnLWJIkSZKWgZUSoo4ty9kCFJk5BGwHDomIdQARcRBw8Hz92uqPW+hYc/SRJEmStEyslPdy1pbl8Dxthijei1oH7GrrM1+/obJcV2Gs2frMKSKun+PQCQvpL0mSJKm7VspMlCRJkiR1xUqZiRosy9XztFlTlrs6+kz327mAPgsZa7Y+c8rMk2erL2eoTlrIOSRJkiR1z0qZibqtLI+e7WBErKF4lG9bZu4CyMydwI75+rXV37rQseboI0mSJGmZWCkh6icUH+M9NCKOmuX4I8vyhx31P+g4PiMieoGHUSxzfuNC+uxlLEmSJEnLwIoIUZk5AlxR7r5kliZnl+WlHfWXdRxv91yK5c0vz8zRWfqcFRH97R0i4nDgKcA24LsLu3pJkiRJ+5MVEaJK55fl2yPixOnKiHgC8FqKJc4/29HnMxTvQj0/Il7U1ucw4APl7ofaO2TmtRQB6TDg/W19eoBPAr3AxzJzogv3JEmSJGmRLduFJSLiOcA72qr6yvrvtdW9NzMvA8jMyyPio8C5wPcj4ptln2cAAZyTmdvbx8jMrRHxKuDzwMURcSWwBTiT4h2q8zPzylku7xzgGuDciHg6cAPwGOCBwNXAn+/DrUuSJElaQss2RAGHAo+bpf5xHW1mZOYfRcT3gT+kCE/jwOUUYevq2QbJzC9ExGnA24HHUwSvG4CPZ+ZFc/S5KSIeAbwHeBbwQooFJ94L/Flmji34LiVJkiTtV5ZtiMrMC4ELF6NfZn4XeHbFPrdTzEhJkiRJOoCspHeiJEmSJGmfGaIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpApWXIiKiMdExOcj4s6ImIiI7RFxVUScExExS/tmRLwhIv4jIkYiYnPZ/1f2Ms5ZEfGtiNhZ/q6MiOfUd2eSJEmSFsOKClER8WLgGuAlwF3AJcB1wOOBzwF/3dG+Afw9cD5wNHAZcD1wNvCvEfHYOcb5I+ArwBOB7wJXAI8FvhoRf9j1G5MkSZK0aFZMiIqIHuCTQBP4r5n5qMx8aWY+HTgF2Aq8LCKe1tbtVcALgZuAh2bm2Zl5OkUIWw38TXne9nEeAnwQGANOy8xnZ+YLgIcDW4APR8SD6rxXSZIkSfVZMSEKeChwGPCTzPw/7Qcy88fsnoV6TNuhN5blWzLzF23tv0Ax0/Qg4Pkd45xLEdQ+lZnXtPW5EfjvQE/ZRpIkSdIytJJC1NgC220BiIgHAL8CjFA8xtfp4rI8q6P+OR3HF9JHkiRJ0jKxkkLUT4FbgIdExMvaD5SLRLwc2AZ8saw+tSx/lJkTs5zvurI8pe0864Fjy91/7+yQmbcD9wLHRcRB9/E+JEmSJC2hnr03OTBk5lRE/BbwVYp3mc6jeNfpMOApwA3AKzNza9llOgxtmuOU0/XHtdVN99mWmUPz9NtY9vuPvV13RFw/x6ET9tZXkiRJUvetmBAFkJnfjYinUsw2PbL8AYwD36SYrZq2tiyH5zjddEhaV6HPXP0kSZIkLRNdD1ER8YoFNh2neP/oB5l5T7evYzYR8ZvABcD3gN+kWK78/sCbgPOAp0XEEzNzoe9P1S4zT56tvpyhOmmRL0eSJEla8eqYiboQyArtMyIuB16XmTfVcD0ARMSJwEXAPcBzM3OwPHQT8NqIuD/wXIplzf8/YPr46jlOuaYsd7XV7a3PXP0kSZIkLRN1LCzxHuB/A0Hx6NoXgY+Wv0sogkZQLCn+WeA/gWcCV0XEUTVcz7TfAHqBr7cFqHafL8vTyvK2sjx6jvNN19/aVjfd55CIWMPsZusnSZIkaZmoYybqfwPXAp8DzsvMHe0Hy1Xpzqf4iO3jKN5D+gvgDcBbgdfVcE2wO7zsmOP4dP0hZfmDsnxYRPTOskLf9PtUP5yuyMztEXEbxQITjwC+094hIo6hWFTi1szcWf0WJEmSJC21Omai/pxiqfDXdAYogDI8vKZs82eZ2QL+BLgLeFYN1zPt7rJ89BzHpz+y+3OAzPwZ8GNgFbu//dTu7LK8tKP+so7jC+kjSZIkaZmoI0Q9DfjnMhzNqjx2LfD0cn+cYuanzsf5vlyWp0XE77UfiIjHU8yEwZ4fyT2/LD8QEYe1tX8R8Dzg5rbzTvsoMAX8bnne6T4nAm8DJss2kiRJkpahOkLUauCIBbQ7HBho299JETBqkZnXAR8sdz8ZET+KiM9HxHeA71Is+PDpzLy8rdvnKN7pOhH4z4j4+4j4J4qgNQK8PDP3uObM/AnwZqCf4j2vr0XElyhC4v2AN2bmzXXdpyRJkqR61RGi/oNitue0uRpExFOAp7Lnx2aPATbXcD0zMvPNwIuAb1AEvRdSLBP+LeBlmfnajvYt4CUUy5/fSbF6368CXwAenZn/PMc4H6aYqbqG4kO+ZwD/CpyVmX/Z/TuTJEmStFjqWFjiAxQzNf8QEX9Vbt9eHjsGeDHwCooV+j4AEBEHA4+iCCe1yswvUswuLbT9FMVjfefvrW1Hv0vx3SdJkiTpgNP1EJWZl0TEG4D3A78D/HZHk6D40O4bykADxWNufwr8Y7evR5IkSZK6qY6ZKDLzoxHxFeDVwBOBI8tDd1G8f3RBZv60rf1PKUKXJEmSJO3XaglRMLNE+NvrOr8kSZIkLYU6FpaQJEmSpANWbTNRABFxLMWjfP1ztcnMb9d5DZIkSZLUTbWEqIh4FfAO4NgFNG/WcQ2SJEmSVIeuh6iIOAf4TLn7I+BGYFe3x5EkSZKkpVDHTNQbgUng7Mz8Sg3nlyRJkqQlU8fCEicC3zZASZIkSToQ1RGitgL31nBeSZIkSVpydYSoLwNPiojeGs4tSZIkSUuqjhD134Ah4IKIOKSG80uSJEnSkqljYYkPATcAvwk8JyL+DdgEtGZpm5n56hquQZIkSZJqUUeIemXb9sHA0+dpm4AhSpIkSdKyUUeIeloN55QkSZKk/ULXQ1Rmfqvb55QkSZKk/UUdC0tIkiRJ0gHLECVJkiRJFezz43wR8VOKBSLOzMyflfsLlZl5wr5egyRJkiQtlm68E3V8WfZ27EuSJEnSAWefQ1RmNubblyRJkqQDiYFHkiRJkiroeoiKiHdGxPMW0O6siHhnt8eXJEmSpDrVMRP1LuAFC2j3POBPaxhfkiRJkmqzlI/zNYHWEo4vSZIkSZUtZYg6Gdi2hONLkiRJUmXdWOKciPhcR9WTZ6lrH/MhwKOBL3VjfEmSJElaLF0JUcAr27YTeFD5m88PgTd3aXxJkiRJWhTdClFPK8sArgC+Drx/jrbjwJ2ZeWuXxpYkSZKkRdOVEJWZ35rejoiLgKva6yRJkiTpQNGtmagZmXlOt88pSZIkSfuLpVydT5IkSZKWnVpCVESsjoi3R8S/RMT2iJia4zdZx/iSJEmSVJeuP84XEQcDV1F8B2qKYiGJAO4Cjii3AVxYQpIkSdKyU8dM1FuBhwGfBg4CLgYyM48C1lAsh3438M/AA2sYX5IkSZJqU0eIegFwJ/D6zByl+G4UAJk5mpl/BZwJvBA4r4bxJUmSJKk2dYSo44DrMnOi3G8BRETvdIPMvAH4Fnt+pFeSJEmS9nt1hKjR8jdtZ1ke0dFuK/CAGsaXJEmSpNrUEaJuB45p2//PsnzqdEVE9ACPAbbUML4kSZIk1aaOEHUVcEpErCv3LwUmgY9FxO9GxFkUi00cT/FInyRJkiQtG3WEqP8L/BB4IkBm3gn8CbAe+ATwJeB5wC+AP65hfEmSJEmqTde/E5WZ3wGe0FF3fkR8l2JFvkOAG4ELMnNrt8eXJEmSpDp1PUTNJTP/meLbUJIkSZK0bNXxON+CRMTzIuJ7SzW+JEmSJN0XizYTBRARAbyU4h2phy3m2JIkSZLUDV2ZiYqIIyPi0xFxa0SMlOWnIuLwtjYvAn4M/A3wq8DdwLndGF+SJEmSFss+z0RFxEaKd52OAqKsPgZ4DXB6RDwa+BjwW+Xxu4H/AfzPzBzb1/ElSZIkaTF143G+twJHU8wyvRu4HlgHPBt4M/BPwKOAUeA9wEcyc7QL40qSJEnSoutGiHo2sAN4emb+oq3+exGxmWIWqgU8s1z+XJIkSZKWrW68E3Uc8L2OADXt4rK82gAlSZIk6UDQjRC1GrhrtgOZeXe5+bMujCNJkiRJS26xvhM1tUjjSJIkSVKtuvWdqCMi4rT7cjwzv92la1iwiDgU+GPgLOBYYAT4OfCPmfnmWdqfBbwJeERZdR3wF5l52TxjnAy8CzgdWAvcDHwW+Fhmtrp0K5IkSZIWWbdC1H8pf1WPZxevYUEi4lHAPwD3o1hJ8MvAQcBJwBsoVhRsb/9HwIeBSeByYAx4JvDViHhdZn58ljGeAPwjsAq4liKgnVae54kR8dLMzDruT5IkSVK9uhFgvk0RhvZ75QzU1ynCzfMz8ysdxx/bsf8Q4IMUwelpmXlNWf9g4GrgwxHx9cy8ua1PL8UHhVcBb8zMD5f1a4FvAC8BvgZcWMc9SpIkSarXPoeozDy9C9exWN4NbAT+oDNAAWTmtR1V5wJN4OPTAapsd2NE/Hfg/LLN69r6vBB4APCD6QBV9hmMiD8E/g04D0OUJEmStCwt1sISSy4iVgEvB4aACxbY7TllefEsx6brzlpon8y8Dvgp8LCIOH6B1yBJkiRpP7Io7yNFxCEAmbltMcabw6OBdcB3MnMkIp4NPAMYAG4EPp+Zd043joj1FItOAPx758ky8/aIuBc4LiIOysyd5aFTy/K6Oa7jOuCBwCkU70pJkiRJWkZqC1ER8WsUj7o9ieL9ICJiBPgOxQp1X6tr7DmcVJb3RMSXgOd3HP+ziHh1Zv5tuT8doLZl5tAc59xE8XjgccB/dPTbNE8fyj57FRHXz3HohIX0lyRJktRdtTzOFxEfBi6lmOlZDewEdpTbzwQujYjz6xh7HoeU5fOAZwF/ABwGHE+xeMQq4KKIeHjZbm1ZDs9zzulwta6tbm/9ZusjSZIkaZnoeoiKiJdSzEBtBl4PHJKZh2TmBmA9xSIM9wDnRsSvd3v8eUzfaw/wzsz8ZGZuzsxby29D/T3QS8cS50stM0+e7QfcstTXJkmSJK1EdcxE/T4wCpyWmR/PzB3TBzJzZ2Z+AngqxbLhv1/D+HMZbNuebWGJ6bqndrRfPc8515TlrlnGmavfbH0kSZIkLRN1hKhTgSsy88a5GpTHrgAePlebGtxalsOZuXmW4z8vy8PK8rayPCQi1vxycwCO7jh3e7+jmd1sfSRJkiQtE3WEqD52v/czn6Gy7WKZXmFvVUT0z3J8Q1kOAmTmdnYHokd0No6IYygWlbi1bWU+gB+U5SPnuI7p+h8u8LolSZIk7UfqCFG3AE+dZ/aGiFhN8djcor3Xk5m3UQScYPcje+2m69qXM7+sLM+epf103aUd9XP2iYhHUCxv/qPM/Pner1qSJEnS/qaOEPV5ikfivhQRJ3YejIgTgEuAQ4G/q2H8+XygLD8YEUe2XdPDgfPK3U+1tf8oMAX8bkQ8vq39icDbgMmyTbsvAj8DTo2IN7T1WQN8otz90L7fiiRJkqSlUMd3oj5I8Q2mM4AbIuI6dr9vdBzwKKAJ/CuLHCYy8/9ExDOB3yqv7WqKpc2fCPQD/ysz/76t/U8i4s3A+cBVEfFNYJximfZVwOsz8+aOMSYi4uXA5cD55WqFtwJPAY4ELgYuqvlWJUmSJNWk6zNRmTkCnE4x6zIOPAZ4Sfl7bFn3CeDpZdvFdg7wGopHCU8vr+k64JWZ+ZrOxpn5YYpvS11DEYTOoAiAZ2XmX842QGZeTXHfXwAeVPbfCrwReGlmZndvSZIkSdJiiTr/ni/ffXoUcP+y6k7g3zJzvg/YagEi4vqTTjrppOuvv36pL0WSJEnqipNPPpkbbrjhhvK7qPutrj/OFxFbgf/IzKeWYemqbo8hSZIkSUuljoUleoBNNZxXkiRJkpZcHSHqeuCoGs4rSZIkSUuujhD1l8CTI+LJNZxbkiRJkpZUHUucfwf4DPAPEfEZio/R3gaMzta4/AiuJEmSJC0LdYSonwMJBPCH5W8uWdM1SJIkSVIt6ggw36YIR5IkSZJ0wOl6iMrM07t9TkmSJEnaX9SxsIQkSZIkHbBqfx8pIk4ENgJbMvPGuseTJEmSpDrVMhMVEf0R8WcRcS/wnxQr9r217fjLI+K6iHh4HeNLkiRJUl26HqIiYhVwJfDHwDjwNYqV+tpdAZwK/Hq3x5ckSZKkOtUxE/UW4HHA54AHZuZZnQ0y807gBuDMGsaXJEmSpNrUEaJeSvFx3d/LzFk/sFv6CXBMDeNLkiRJUm3qCFEPAP41Myf30m4cOKSG8SVJkiSpNnWEqBEWFo4eAGyrYXxJkiRJqk0dIer7wKMj4tC5GkTEA4BHAP9Sw/iSJEmSVJs6QtT/AtYBfxsRGzsPRsR6ikUneoFP1zC+JEmSJNWm6x/bzcy/jYizgN8AfhoRV5eHnhQRXwaeChwE/FVmfrXb40uSJElSnWr52C7wXym+EzUKPLOsOxE4C0jgbcA5NY0tSZIkSbXp+kwUQGYm8BcRcT7wSOB4isC2CfiXzByvY1xJkiRJqlstIWpaZk5RLB7hAhKSJEmSDgh1Pc4nSZIkSQekWmaiIqKfYmGJpwJHAv1zNM3MPKOOa5AkSZKkOnQ9REXEscDlwAlA7KV5dnt8SZIkSapTHTNRHwMeBFwBfBT4KTBYwziSJEmStOjqCFFnADcBz8rMyRrOL0mSJElLpo6FJcaB6wxQkiRJkg5EdYSoqyke55MkSZKkA04dIepPgV+JiN+p4dySJEmStKS6/k5UZl4XEc8E/joiXg58A7gDaM3R/q+6fQ2SJEmSVJdavhMFPAM4DDgeePIcbYJiiXNDlCRJkqRlo47vRL2Z4pG+MeCLuMS5JEmSpANIHTNRvwfsBB6XmT+p4fySJEmStGTqWFjiCOBbBihJkiRJB6I6QtQtNZ1XkiRJkpZcHWHnU8DTIuL4Gs4tSZIkSUuq6yEqMz8BfBq4KiJeGRFHdXsMSZIkSVoqdazONzW9CXy2rJureWZmXcusS5IkSVLX1RFgbqf4/pMkSZIkHXC6HqIy8/hun1OSJEmS9heuoidJkiRJFRiiJEmSJKmCOhaWeEWV9pn5V92+BkmSJEmqSx0LS1zIwhaWiLKdIUqSJEnSslFHiHoPs4eoBnAM8FTgARRh69YaxpckSZKk2tSxOt+75jseET3A+cBLgcd0e3xJkiRJqtOiLyyRmZPAG4AR4H8s9viSJEmStC+WZHW+zJwC/g14xlKML0mSJEn31VIucX4EsGYJx5ckSZKkyhY9REVEIyJeBzwB+OFijy9JkiRJ+6KO70RdMc/htRQr820AWsC7uz2+JEmSJNWpjiXOT9/L8UngO8B7MvMfaxh/wSLifsCPgUOBWzLzQfO0fSXw+59iRIoAACAASURBVMBJwDjwPeB9mXn1PH2eBLwNeDzQB9wAfNwPDEuSJEnLVx0h6gHzHBsH7s3MiRrGvS8+BGzcW6OI+AhwLsWKgt8ABigWxXhmRJydmV+apc+Lgb+jeGTy28C9wBnARRFxSma+qWt3IUmSJGnR1PGdqGXxAd2IOAP4LeDTwGvmaXcmRYDaAjwhM28q658AXAlcEBFXZub2tj4bgM8BTeDFmXlJWX84xSzceRHx1cy8soZbkyRJklSjOmaiAIiI1cCjgSOB/rnaLcWjbRGxCvifFI/XfZB5QhTwxrJ833SAAsjMayLiU8DrgVdTzGpN+23gIODL0wGq7POLiHgLcAlwHkUIkyRJkrSM1BKiIuI9FB/UXT1fMyCBpXg/6E+BBwJPBeZ8tLAMW08vdy+epcnFFCHqLPYMUc+Zp89lwChwZkQMZOZotUuXJEmStJTqWJ3vLcDbgSmKwHAjsKvb49xXEXEKxSzQBZl5VUQcP0/zh1DMom3OzE2zHL+uLE/pqD+14/iMzByPiB9RzNI9GJd5lyRJkpaVOmaifodiAYanZOYvhYilFBEN4DPAduAtC+hybFnOFqDIzKGI2A4cEhHrMnNXRBwEHDxfv7L+0cBx7CVERcT1cxw6Yd4rlyRJklSLOj62ewzwrf0tQJVeBzwGeHNmbllA+7VlOTxPm6GyXNfRZ75+nX0kSZIkLRN1zETdze6QsN+IiGOB91EEvAuX+HIWLDNPnq2+nKE6aZEvR5IkSVrx6piJ+r/A6RGxpoZz74tPUHzw9ncr9Bksy/kWyJi+z+n3vgbbjs3Vr7OPJEmSpGWijpmodwFPBL4SEa/NzJtrGOO+eC7Fu1Cfioj2+oGyPCoiriy3fyMz7wZuK/ePnu2EZVBcD2zLzF0AmbkzInZQvBd1NMUy6p2mz7csvqklSZIkabc6QtTXKGa4Tgd+HBG3Uiyk0JqlbWbmGTVcw1zWUyxrPpuBtmPTweonwBhwaEQclZl3dPR5ZFl2Lg7xA+C08vgeISoieoGHUSxzfmPVG5AkSZK0tOoIUae3bTcpvsf0wDnaZg3jzz5QZsxWXy5x/jPglsx8UEefkYi4Ang28BLgIx3dzy7LSzvqL6MIUWcDf91x7LkUIe2rfiNKkiRJWn7qCFEPqOGcS+l8ihD19oi4LDNvAoiIJwCvpXhE8LMdfT4DvA14fkS8KDMvKfscBnygbPMhJEmSJC07XQ9RmXlAveeTmZdHxEeBc4HvR8Q3KRaoeAYQwDmZub2jz9aIeBXweeDi8l2rLcCZFI8Unp+ZVy7eXUiSJEnqljpW5zvgZOYfAecAP6YIT08ALgdOy8wvzdHnCxSP9P0D8Ajg14CbgVdm5nmLcd2SJEmSuq+Ox/mWlcz8OcWM0t7aXQhcWPHc36V4FFCSJEnSAcKZKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFVgiJIkSZKkCgxRkiRJklSBIUqSJEmSKjBESZIkSVIFhihJkiRJqsAQJUmSJEkVGKIkSZIkqQJDlCRJkiRVYIiSJEmSpAoMUZIkSZJUgSFKkiRJkiowREmSJElSBYYoSZIkSarAECVJkiRJFRiiJEmSJKkCQ5QkSZIkVWCIkiRJkqQKDFGSJEmSVIEhSpIkSZIqMERJkiRJUgWGKEmSJEmqwBAlSZIkSRUYoiRJkiSpAkOUJEmSJFWwYkJURKyOiBdExGcj4icRMRoRQxHxg4h4Z0SsnafvKyPi2ogYjIitEfG1iHjiXsZ7Utlua9nv2oh4RffvTJIkSdJiWjEhCngZ8EXgVcAU8BXgKuABwLuBf4mIwzo7RcRHgAuAhwGXA9cCzwC+HREvmG2giHgx8C3gWcAPga8DJwIXRcQHu3tbkiRJkhbTSgpRE8CngZMy86TM/PXMfBbwEODfgYcCH2nvEBFnAucCW4BTM/MFZZ/TKILYBRGxvqPPBuBzQBM4OzNPz8yzy/PfDJwXEafXeJ+SJEmSarRiQlRmXpSZr83MH3fU3wX8Qbn7oojoazv8xrJ8X2be1NbnGuBTwHrg1R1D/TZwEPDlzLykrc8vgLeUu+ft6/1IkiRJWhorJkTtxQ/Ksh+4H0BErAKeXtZfPEuf6bqzOuqfM0+fy4BR4MyIGLjPVytJkiRpyRiiCg8sywlga7n9EIpQtTkzN83S57qyPKWj/tSO4zMycxz4ETAAPHhfLliSJEnS0uhZ6gvYT5xbll/PzLFy+9iynC1AkZlDEbEdOCQi1mXmrog4CDh4vn5l/aOB4ygWnZhXRFw/x6ET9tZXkiRJUvet+JmoiPg1iveaJoB3tB2aXvJ8eJ7uQ2W5rqPPfP06+0iSJElaRlb0TFREPBT4ayCAN2fmD/bSZdFl5smz1ZczVCct8uVIkiRJK96KnYmKiKMovt90CHB+Zn60o8lgWa6e5zRrynJXR5/5+nX2kSRJkrSMrMgQVX7L6RsU7yVdALxplma3leXRc5xjDcUS59sycxdAZu4EdszXr63+1upXLkmSJGmprbgQFRFrgf9H8SjcJcDvZGbO0vQnwBhwaDlr1emRZdm5OMQPOo63j90LPIximfMbq1+9JEmSpKW2ot6Jioh+4MvAY4F/AH4zM6dma5uZIxFxBfBs4CXARzqanF2Wl3bUXwacVh7/645jz6VY3vyrmTl6X+9DkiRJ2het1gSZUxR/CrfInCz3p7dbM8eTKcg52lCeY476zClaUyNMTQ0zOTXE1NQQU5ND5fYwralRWq0xWjlOqzXGyMjyeFhrxYSoiGgCf0vxAd2rgBeV322az/kUIertEXFZZt5UnusJwGuB7cBnO/p8Bngb8PyIeFFmXlL2OQz4QNnmQ124JUmSJK1QmVmEj9YoU63R3WGkNcbU1CitVvGbmNjO6NjdjI3exdjY3cX22N1MTu5c6luYVau1tz/P9w8rJkQBfwi8sNy+F/hkRMzW7k2ZeS9AZl4eER+l+I7U9yPim0Af8AyKFf3Oyczt7Z0zc2tEvAr4PHBxRFwJbAHOpHiH6vzMvLLL9yZJkqT9RKs1weTkLiYnd5a/XcUMTBl0plpl4CnDzlQZhlpT09tj5fZ0GBqjNTXWtj+6bMLGgWolhahD2rZfOGcreBdFyAIgM/8oIr5PEcKeAYwDlwPvzcyrZztBZn4hIk4D3g48niJ43QB8PDMv2pebkCRJUvcVMzuje4SfiYntjI3dw9j4ZsbHNzM1ObQ7yEy1hZ/W6MzsT1GOLPXtdEkQ0UNEg4gmxYNdzXJ/z/o5j9Gg0VxFs7manuZamj1r6GmuodlcTbNnLc3GAI1GH41GP41GHwMDr2E5rL+2YkJUZr6LIiDdl74XAhdW7PNdikcBJUmSVIPOGZ+x8c2MjmxidPQOJqeGysfbindtsjU+s128fzO+x/HJyUEyJ5b6lvZBg2ZzgMZMKBmg2Rygp7mO/oEj6O8/goH+I+jvP5L+gSPo691Io9E3RxCa/s361Fatms01e2+0H1gxIUqSJEn1aLUmZ97PmXkvp+2xtN3v7ozNPJr2S3VtgaY9+ExNB6D24DM1xuTULqamhpf61veiQU/POnp6DqKnZ00ZcPrLsNNfBJ3GAI1m23ajn0Z5vDjWtl0eK7b3PFdE75KEnpXKECVJkiQyk4mJbYyPby5nd3YxOTXI1OQgk1ODTExsZ3joFoZHfs7k5GBb8Bkjc3KpL7+rInrp6TmI3t6D6es7lP7+w+jvO4xmzzqanUGm2d+2XdRPB6dmc43B5gBliJIkSVohWq1JJia2Mj5+78xvcPA/2bL1KkZGbl/G7/IUMz59fRsY6D+KgYH709u7fuY9m0ajn2j00SzLmfrYvd3Ts7acMTqonNkx/HRbq9ViYmKC8fFxdu3axe23387w8DDj4+NMTEwwMTHBzp3756qBnQxRkiRJB4CpqWFGR+9idOwuxkbvbNu+i7HxXzA+voWJiW1A1n4tEc2Zx82mf822x9T2rC/f4WkO7BFq5i/7y9me4lfM+DRqvy/NLjPZuXMnmzdvnvnde++9jI6OMj4+vkdI2puxsbFFuOJ9Z4iSJEnaz7Rak0xO7mBiYgeTk9uZmNjBxMR2Jia3MzGxncmJHTPb4+ObGR29i8nJHV0Zu9EYKGdk1parqa0tt9exatWxrFnzIHp7D2l7P6e/IxgN0Gj4J+aBanJykq1bt3LPPfewadMmNm3axObNm5dN+OkW/4VLkiQtklZrnLGxXzA6egcjo5sYHb2T0ZFNjI3dXYaiIixNTQ3Weh3N5mr6ejfS13c/+vo2ctBBp7Jhw5NZteoYenoO9lG2FWR8fJzR0dGZ39jY2B777b/BwUHuuOMOJif3/R24RqPBkUceycaNG+nt7aWvr4/e3l4uuugiNm/e3IU7q5chSpIkrTit1iSDgzcwPPxzMifJnJqzbM1sT/5ym9b0fnv7iWJ1uslBJqeGmJoaZmpqiMnJITLr/UBqRJP+vsPpHziSgYH7M9B/JP0DR9Lffzj9fYfS17eRvr6NNJura70OLb5Wq8X4+DhjY2N7/EZHRxkeHmZwcJChoaFfKhfyiN1CrVu3jkMPPZRDDz2UjRs3sm7dOvr6+mYC0vR2X18fPT09s4b11auXx79NQ5QkSTogZSbjE1sYGrqJoaGbGRq6mZGRWxkdLb4j1GrVG2i6IaKHnp6D6e1dv/vXczA9Zdnbu57evg27w1LfoeW3frQcZSZTU1Mz7w+1v0s0vT80NMTw8DBDQ0MMDQ2xY8cOduzYsagLMjQaDTZs2MDhhx/OcccdNzOjtGrVqkW7hqVmiJIkSfulYsntrYyMbmJk5DZGR25nZPQOpmY+otr2vaHpbwhNtX+jaJRWa3Spb2NWfX2HMTBwFKsGjmJgoFxNrm/DTDDq6VlPb+/BLpG9H5sOPJOTk3stpwPQdCia3h4fH2dkZIQdO3awfft2hoeHabVaS3I/zWaTgYGBOX/9/f0MDAxw+OGHc9RRR9HTs28xIjPZPradO4fu5MdbfswPN/+QOwbv4Nadt3bpjupliJIkSUui1RpjfHwrExNbGRu7h5HR2xkZub0ITKObGBm5nampodrGj+hl7ZoH02iuKlaTix4imkRn2ej55bpZyt39mzSaq2g2V9PTXEOzubpYnKHc7u29H81mf233pftmeoW5bdu2MTw8zMjIyMxvcHBwj6AzNTXF1NTUUl/ynCIbRPYQ2aSRTRrZSyP7aLT6aJZlI/totvrKYz0Eu2cwExgBhnP3So6ZU8AQ8FOSW8hMWrTI3HO1x5xe/THb6/asyOKEbb3WsIEnsAG4bOhyhqjvf/fdYoiSJEldkdkq3/3ZxcTkTsbHNs88Ojc2fm/5faItTIxvZXxia+2LJ0zr7d3AmjUnsmbNiaxefTyrBo5hYOAoVq8+nmZz5Tx+tBK0Wi22b9/O4OAgk5OTM7/pGaHZfkNDQ9x777375wpzCZFNIpuQjSIUtXpotPqIVi+NVm8RjKYGaEwN0GgVwSlY+HLvrfIHVUNhEDTp9jxpdP2M9TBESZK0ArQHnF/6TQ0yObmLqcldxSNxOUGrNU62JnZv71E3Tqs1MVPXao0xOVmcY/rPsW5qNteyatWxrFp1DKsGjqa3d/3MB1N/eXntPb8nVCykcL+uX5PqNf1e0PQjb9u2beOOO+6Y+e5Q53tC09s7duzoyspx91kCNIiMIvTMbDdnwlCUYWjm12rSbPUXIWiqb892FcKQFpchSpKkZazVGmdiYhtjY79gZPSOYuZn5A5GR+9gdOzO4ptCk4OLNutzXzSba+jru18xQ7TqmCIwDRxdhKZVx7rk9gEkM9m+fTtbtmxh69atM7/t27czNjY2E5qW8lG5xlQfjVYv0eolsqeY3Wn10pwqgk6z1VcGpCIorVrbz+o1/fQP9NLT3wO9LcYbI4w0hhhkJ9tjC/fm3WxvbGG4OcgE40y1JpksfxM5SSsX+h8f7tuHkvft88pF72Y06W320tfoo7fZy8ZVh3L0uqNZ338wPdFDT7OHnuilp9Gkp9Gzu65R1Pc2iv3e6KWn0UNvo5eNqzaypnfP9/7+8p9Wcfe2fbrgRWGIkiRpP5WZZI4zVS6WMDx8C9u2X8uO7f/KyOgmJia2lrM/+5/i3Z9DGBg4moGB+9PffwR9vRvo7duwZ9m7gWZzYKkvV/tgbGyMnTt3zvwGBwdnwlB7MJqeUdq1q/5/szHVOzOTE9koH4VrQLm/53aT5uQqeibX0JxcTSNn//M4I5laPcL42iHG1uxi8JB72Xm/uxga2M5kTjI0McQdg3cwOrWAxUyWcAHFDQMbePAhD+aYdcdxSP/9WNNzMOt61nNQ/3oGmqvoa/TR1+wvw1IfvY0+ehu9NNs+oNz5HtTu+mrXkpkMT47B6E6453rY9nNao8sgQWGIkiRp0UxNDRcLJ5SrzQ0P3cLQ8E93rzY3s7Lc6Mzqc/v635Bn02isoqdn3Z6/5lqaPWtpNgaIRi+N6KXR6OvY7pu9PnrL8xw0c75Go7fr163F02q1GB4envWDq9u2bWPz5s1s27aNnTt31v8eUUK0eumdOIjmVH/5aFxjlkfjGkSrl56p1cU7RAsw1hxhrGeI4Z5hRlffwVjvEKM9Q4z2DDPaMzSzv6t/G7v6t9BqdMyQ7Sp/NeltFLM2fY0BemIVDfrpYfd2I/sh+8hWD9nqoZVNWlM9tKZ6mGo1mZpqMjnVZGKyycRkg4nR9dw9uoFbJzv/fyWBbeVvKR3PnUPLY9EVQ5QkSV3Sao0zOnonI6ObyuW4ixXmpleam5jYWtvYzebaYrnsVcXMTzEDdBR9vRvawtJams21BhzNaLVa7Nq1i+3bt3P33Xdz4403snXrVnbs2FHrUtsDfavpzdUw1k9rqI/m5ACRvUTrl98ZKpYamPtxzonGGNtW/YIdA5sZ7xlhojHOZGOcyWZRTpTlZGOcsZ4iNI32DDPWM0SrUc89ru9fz9Frj+aYdcdw9Lqi3LhqI33NYlant9FLb7N3Zrsnetg5kty9Y5K7tk9w57Zxbt/6/7P3JkuSJVl63qfDHczM5wiPOcfKkkZ39QDpBgoQglhRSC6wwguQFPIJuCEfghtOQhE+AbjhggIBIRRpIShYEGw0uroLBXRnVWVWZWbMET7ZcGdVPVzotcE9PGaPKdP+yJPnqF61a9fNzczvr2dq+Jv7U3758KJZ2sVvzPwQsSZRa6yxxhprrPEScK6gLL+mKL6mqm+fIktN85A3UVhhDmOGbG/9MTu7P2Vz8yekySXS9NI6JG6NcxFC4OHDR9z97h7TSUFZlJRFRVlUTE4KqmZK5WfIS1dlOwei+tLZ2dJbFAwqLEttR4JkSbpNdEhf6LStqbmz/UuqZEqnGzqzlNbUTPJDDkZ3EPVqnzujDPvDfa4Or3J5cJnMZIt8nbk+ZZtIeOYEaHVtalJujG5wa/MWm+nm4jmcD0xrx0nVcVK2nFQdB9OGrx8XfPXomO+OCr47Kqm7d9Mf6l1DnfrOVHwoJG9NotZYY4011lhjBSKBtj2kaR7QNA97eUDTPGAy/QVF8evXOr9SCXl+g0F+i+Hoc0bDL0jSvb7SXH6q0pwx8/Fyfl1gYY1VtG3Lt1/d5au//o57dx4wLcY0rqQLDY4GXpFcLCCqL64QCZDqy2tbN4z5Qz6LPYdC+lqlqZ3qmOQHjPMDJr0cjO7weHT7yRC6cxDzeFZkZZz1+T2pSfls+zP+cP8PuTG6wdXRVS7llzD6ydA/H4TDWcP9cc3dk4qvHs345eMZs8bT+UDnA63rtRda5+m80Pl7tO4O7cqacAGcIE80N3cG3NgZsJFZ8sSQWR3FQOYLMjcha0/I2mPy+iCOfUHmZ2R+StZN41w3IachUx0ZHRktFo96Cnl52m/1yfUKhnuo0WUYXYbBLuTbkG1Btgn5VrQX+syxZAhK8ZN/+t/y14ev/5q9aaxJ1BprrLHGGj8YhND1Zb5ni7Le0+m/Yzz+GU19PxKm9jEi3Ws8iyLLrvaV5m4xyD9iMLhF3ussu4pS7zCrfI0PAt57Tk5OOD4+XuQizSYV46Mp05OS2aTgZHZI7Sfn3+W+JJ+ZV5+z3SZps4dxOTpkfc+hiyXuXjkebnzD/a2vebj5LceD+0yzY1CCVZbc5uQ2JzMZn9vPyE1OZjP28j2+2PmCT7Y+4ebGTW5s3GAn2yHRyQttLkzrjq8ezXg4afjloeMv6oJZM2baOGa9p+jBuObBuObhpMZdBPt5SewOEz6+NOLj3QEfbxs+GTT8ydaYz9MxqrkH9RiaSdTTB3D3Szj+Bl64uh+8ctV0bZFsB/IdyHeRfBd2v0D2fgzX/hj2fowoA0GQIFF7WY4F8CvHZgKT+fESQoEEIVTvsET9S2BNotZYY4011vjewPuaur5LUfyak/FfUNd3aJrHtO0j2vaQEF6gatYLQOsBo9HnDAafnEOWbqD1h5EY/X1H8IG6cFTTlrroCF76iocsbuoWYxEkLKuOzcesHu8fJ7I63z/mzDnm6zn7OCJBqpqCqp3RdDWtq2m7htZVVF1B1U6puoIXCmt6HncQMG6E9ikCBCV4FSjslGk2ptYtte7w2iMERAmiwsIO9OPVuRV7Ph9UPyauDSv2fF5rzbWNq1zfvcrnlz7jj7d+ys3Nf8zN0U128h1ym5O8ZL6eiFC2nqOi5aTsOCpbTsqW46LlqOw4Llq+OSz46tGM++OL+fy/KrSCnYFlJxW2E89no44vBiU/SqbcUmNuygEb5QNkeoR8fYx0DpEUIaEmapEEmdsMgL+HyH+4MmdBDGAQnqJFR20GYEeQbCDKguh4TBQiqtdAUPF93ALl096TU+BnF/I6hUl7Ied501iTqDXWWGONNT4YOFfE/ke9VPWdpV3doesuLgbEmBFZdnVFrjEcfML29t9hOPwUpdZNMF8Xs+OaL//VfYpxS+h3rYMXQohawqodTs/36xb2mbF3gaZybzW9QhBEObyp6dIJ3paIcoh2BOUR7RDlCLp9aU/Rs59YQUipdcs0mVLaksqWzJIp4/SEMp3SmhrUxb4YqU75eOtjttIthsmQgR0wtL3ux9vZNh9vfszHmx9zbePaS5OkOcZVx5f3J/z5N0d89WjG3ZOKu8cVB7OW1l98LlEGDFBcyiw3NzI+3Rrw2c6A3dSSBiETSFxL2tTYrsZ6j3VRjA8YL+helAfjHMoFKA1SppH0PB4By0bQs17eGlwvT+WWckavsYo1iVpjjTXWWOO9gohQ1/eYTP6SyeTfniJKXXdx5XeNGWHNBjbZYmfnp2xv/RFZdm1BmqzdfP5J1ngpzI5r7nx5zMNvJhzdK3jwmzHBv383aIInmJagHKI8zD0xyi+8MvR2UI5garypCaZBXiB/5yUuBB0ytE8XleoCQmNqalsyTSY8GN3n7sZvqdPi3FNsppvcyK8uCiaclXnj0yekL56wsHXCZrrJ5eFl9gf7XBle4cboxrn5RM9DCELtPEXjqVpP0TqOy5aDWcvBtOFgNpeWg1nDg3HNo+nzy6hrYAPFNooNIgmKEu0cxbbRXMkTtrRmExihGAgMAmRBSD1YJ0u+2fRyODfOg+F5jZ9+UCUjFKAVSqvofluxlX7WsV6nH8YG1ZpErbHGGmus8cYgIjg3pm0PcL7Au1nMSfIl3hV9ftKUpo0hd03zmKr6Fu/PvyF8EShlyLIbbG/9ERubv0eW7pNmV0jTyyR2C2M2sHa0zkt6C5gcVNz55TEH3005uDvj/tfjt7apvUqEVBKwA8B6BNeTI0fA4Yk6KEeQDkdD4M3nZIjEG+tAjJYKfY28eIWCU4FOCWIbZukxx4MHHA8fUCfLz4ZCcX10nd8b/Q6XB5fZH+5zY3SDL3a+4KPNj9gf7pPbt1e1se48d44r7p5U3Dkuo30c7YNZS9k6ytZTts8nmhrY7AnRNRS/g2UbxU4/t9XbW/14G8VmbK377BN7oID318siKANYhUoMKrEoq1FWg9UoqxbjVYnrNcroJSEx5xCUM/NPzoHS+pw1nFmr+7Vnzqd6+zVg/ucc7l/Ii/lGsSZRa6yxxhprvBJiaN2dvhjDI9rmEU1PhNq+QEPbPiKEi41vj9XtrpPntxjkp3siDQa3SNMraL3+8/auICI8/GbCv/ln3/Dtv3t+eOXGbsanf3iZNLfo/mZMa/WEvRgbhYincTWzcsykOKGsZ1R1SVUXlHVJWRe07Us2gL3Ae2mnHJNkwlF+RG1qOt2dktrUVLZClCyIz42NG1ztS2zPZVFZrter9igZ8dHmRwyT4cVdeI/WBQ5mDdPaUbSOookyazxl62K57rLlsGg5KlqOZw2PTxqmRUOKIgMyFOmK/mgx1qRosn7dxgoJ2lmxt16EEL01tCgaFC1aNb3doOa2BWUCykQCpKxEspMoVGoiGdrcRe3dRF3+GLVzBZ3a08RoToCMemsVOMV7pOuQto26m2sHrSM4hziPuA68R86OO4d4B4v5c8Zu9fxn7W75vAu7o7t9+638/K+L9V+ZNdZYY43vKUJwdN0RIbSIdITQEqRDQkcI3cpce2auW84t1q8+tmE2+5Lp7N8jcoGhS2eQ5zfZ2f67jEY/iiRpcJM8v0mWXvle5CNNDivufzWmmrZPFid4VuEC4YmCCE87xguseZXHL8dPHitOGmbHTycwm3s5t353l8u3Ntm7MeLqZ5s439E0DUVRUBQFxeWdsAAAIABJREFUZVku9fTMuCho27eTeN7oBq88Xnu88jjlCCrgtIvzyuO0o7QlPvPs7+5zff86W6MtriZXyU2+qDS3sHt9bXiNa6NrJOZ0jpAEQTqP1J7QeKTxhNoh1XIsLoAILhwyCQfx9zSvfiYxJ6xzAecC3gW8D3gvCx18OJV75n1gWnWUjaPrAj7EEgR6RQywi+IaLIhSukKU6KnT+wGPZoZSFYoaTd0Tnn6sGhQlWhVRr9qqjFrXKNWidIjkJhnAzT+JcuVvwc4nsHkdhpdAv7nvIwkBaRpCXUddVoSqROo62nWFVFW0ixndvft0d+/iDg9PE5YnCEwLb7CZ8usgNC+5AfKOsCZRa6yxxhofMELoqOs7lNW3lOVvKYqvKMvfUFd3qJsHvC+R+EolWLuJMUOsGWHsCGNGfV7SiDS9TJrtk6VXyPMbjEZffC9ykkSEk4clD34zZnrUUI4binHL4Z0Z06N3WynsTUAQUAGXzHC2IOiOdAOyLYVKPGIchQ784qilud/Qti3OvbnQOUFOe4FUh9PuCc/Q6lxjGmpTU5saWSnEkOiEK8MrXB1e5crwytIeXeGTzU/48c6PMavlnV0g1J5QdvjSEaYdUnT4yhHKDqkKTspfIrUjlC4SpSYgLxDq9jJQxJu9593wXVusfr/CXEU8XShoQ0ntaypf0/iKJlS0q7q3862E//y/+S9R5jJoC9r02oIyp8cL0afHyiyIkYggzhGaFn98RHf3Ht2X9wnlL8D95SmPy8I7s+qROW/se2/OfNy2hKZBegkrmu512i18eAhKIx/IJtmaRK2xxhprvKcQEbwv6Loj2vaIrjuiaR5SlF9TFF9Rld9SN3ffqDfoedA6I02vkGVXyNIrPRG6SpbtL+ezK1i7871rEus6TzXtqGcd1bSlWtH1tKWcdjz8ZkL1gZTrBfqS1H6lgMK8qMJy7E2NtyVBt4j2K+t9v/70OUuI1Y/fACpTMU2mFElBZaoF+altTWUqGtMsiNCu2mafS1xilx1GpLJFIgmZJCSSkIZeJCFpLWlIyH3GJb/NpW6HTT+KfWvDPJlJUKF3x4UDHoSDN/NDfqBwocOLw4sj9HopHh86vHi6UNOESILaUC7IUOMrWl/SSf/5kVjswYaA9WGhk14Pg7ApgroPj//5L1BBTntf2vZcO7RNDCVrmjjXNISuRZp2MV7Upv+hIElQxqCsRRlzaow1KLs6tot1KrFg+rE10U4TVJKg0hSVJDiTceR2KMOAjoROEjqxdMFQd4aDsaH8J/8VNN++61fhuViTqDXWWGONtwARoSx/y3T6C6rqNnV9l7Y7xPuK4Ct8aAihiuPQ9PriPBVKWZRK0DpZaK1SlE57O0Gtap3269KVufljErJ0n52dn7Kx8TuvVaDB+8DBdzMmB9X5/XrO6c/zMj15Tq/pH3tmvJx/cu68PkGu8Rw/KC/Ek7S9P2D3+ijm+8RfFEpzxlaoebWrOB1tdWYMKKViTx7xON/SSUvnW5xv4s1r6EUc3i/HtauYlEd03bsNo2l1S6MbGtPQmqW9kDPHgl56WpUo9twWV7tL3Kw+4feqH3Grucplt8Oe2yaVVyutvcTb9wh0IpQIFZ5GPG1owZeItCjxaHHo4FD4+P5EEAlRE549d+p4Pz61dsXudRB/hgxFQiS+JWkbbFtjuwblHVoEI4ISQQdBy4oEQQuLcSJCFgQTQnxciBLXBkw/96LbMIf/4//0Rn8v7xRJgh4M0HmOHgxQg0EcD3LUcEhy9RrJzZvYK1fQeXaKwDxhn3MMY15rw0uCcHS/4OE3E47vF5w8qpabS8ctbf3uNv0uGmsStcYaa6zxBtC0B0zGP2NW/JrZ7EtOTv6ctn38hp5N9UUVPmY0+oLR8AsGg48ZDG6RZVfROn9nOURnvTWTw5rx44rxozLqxxW+ez9CDt8kLt0csXdjg+F2ymg7Y3Mv59rn22zsvlgOiYjQdTFvqK5rmqahaRrKsmQ8HnNycnJK3mSI3IvAK89RdkRlKlrT0uqWTne0usVpF0XFEDqvPHt+i2vdJS67HS65LfbcdYYuJxF7WkLy5FwvWUix71koGsAUYYow6fVUAnVoaENDE2pqaWl8TRtqulDjfY34kqw7Zrs7IH/ZwiwSyYaSSFRUT2QUkbQomR/rbeb2CskBbPAkLpD1OvG9B8gHbBCMF2wIsSdSeD89NYJClCFogyiNKLMy7m1lEL1iL8bzsDLV1xyJlef01jZmbw81HIA2KG3A9KJ7MX04oDYoYxCtFyGDsfJdHIsycWx7D86KJwfThyLalbExxDJ5y8bNq5tHcdxvMjl6D3C/kdQvnmukRaTpx6vH+g2jp8wjLMeczo2cHdUc3SteiiilCjIFuVYksdAf6QcStLAmUWusscYaL4m2PWIy+TlF8SvK8hs6N8a5SZRuSucmOHdyoc9p7Q5peok0vcRw8Cmj0RcMh58zGHzCYHATrd9dQrfvAo9vT5kcVpTjlmLccvwg9gBqind7M/82kOaGfDNlsJEwWOiEfCNh+9KAa59tkWcG8YK4gPiYLyNlR3lcUlUlZVHxcPqQ306+paor6ibmCzVNSzVtcBecJ/MiCJwuoBCUR6NBBTrbErRjvmGtUbG6MQqDxqLYVYZ92caKQTuNxURbNFYMFsP1dp/frT5nGJ5dhrtEKBBmvYyJPUL9oiw4OAIevzJmUTL89NzTx0+bEwVBKYISRKmlDRg8VhpMaEh8w6g9YdgekfgacSU2NFjfkPgW61sSf9qDmfcCQO9xWQ1ZS3wgbx2DzpG37tSx+VrTExstT3prBHpCYHvyYAk6SiQUlqASRBu8TphufkQ1uBp/TjS1ghqFRJdnr3tioTTSk4una838jRLnXuQx/XPMn6snM6iVcygdCYU+/3yB/jFvEsLyTXIhCEDby7uFIZKZREOqIsFJ1dJOlMLEiujztlDsA58b0Bsmzi2+F/oCJWq51mgVSf45z51/IKHfaxK1xhprvHcQEZr2IdPpv2c8/hnOTWLej8QwJSGAhD4cZdX2xB0638+t2vO1fjnfh7PQn1Mk9HP+1HzcifMxpEXCaxGk0ejHjIZfkOc3yLJrGDPEmAFa5xiTo/Wg1znGDDBmgLU7b61kt2s906OactLi2oBrPa71dG3Ad4GuH7s2UBcdx/cLDu8Vr+VN0kaxd2OETXQMI1ExLE3pXvdjzplTfTzbE/Mr40XomzpzvnPOpfTK88/XBQHnkS4gXUB1no3UsJUZMhFU7QlFF4sDnFT4h1Nq3zINJXep+FLVzFRNrToaOmrVUamGWnWEN9yjplPR+9OZWFTB61hhbk6O5h4hpx1BOy6FTXb9JpfcDvt+h8vdLpfdDvvdLhvhxUpplwgnCGOECqFBqIEG6fuWCpNefwP8Pwg11eJ4vUKWZsCsJzRzmODIQ00eGrLQRA8K4YwWUi1cGiVc20z5/NKQS0PLTm4ZJoo+xhOC778XBPH9d0WI3ymEaIcQ8K6jKUuaYkZTFjSzgqYsqGczgj+zUSBC4gOJ7z04PdkxIWBCwPq5HQnQoHUMuo6881gfnnvbLyjqfI9qsE+ZbtImW7TpZi9btEm0vckQbQlq7r1Y44eKebkQ23t6rAKLItfRAzTQMFBxPNCKVIF500Tm/XRevhTWJGqNNdZ4p3BuRl3fpa7vUlW3ORn/Gw4P/yXez971pb02suwam5u/z2j0BVtbf8jO9t8lTffe+nWEILjG0/XS1o7H3005vFfEWPVpRz1rKSfRfhNIcsNgI2G0k7FzZcj2lQHb+8OYE3RtiE1fPwxLRMAJ4sNpj48LSD9PPz+fwwdC4/HTNhKhWUsoYvW0UHTUVc3MlTT0pKNvzTpWnm/xtDg65ahVx6wnSyUt3r65EMVAWFSUa3VLZSsKW1DaktKWFLYgwbDnN/md+lNudZfIJCENKalPyENK2hdSyCTFBIsNGZtuhw5FB7RIvx8uHAMPgZaODih6krSUcGo830O/vJFxeSPFGoXRGqsVRimMVv3c6fFQAjuuJukqknaGbWbYeoopx5jJIXp2gmraWNxBWeJt4fxGr9e950LNxwdRNyjuobg3X6vmj+lFBIWKuToolNCHws3zdvqd9BDnEsnIJGNb9rAiWC8kLmBFMIHeGwKRqbP0rMwbkkLv6VHMlGK28Lz0j+mPr3pj2nSTYniNcniNYNKLfEv9IKFW+o9F0ZgVW8/7NamFI225MRMHK/Ms1s7XzefnmzLLsVq8/RbnXxw8fa7F23SeF/nEufr3owuknSftAmnrSVpP2kYPperzz95niO+Q+oTQlQTfEvy6xPkaa6yxBt5XlOU31PUdqvrOgjDV1V2q+g7Ojd/1Jb4S0nSfzc2fMBr+iDTbx9otrN3E2i0Su0WaXibLrr+RinTeB7q6J0SVo5y2lCexdPbkoOLofsHsqImkqfVvJefIJJq96yNG2ynD7YzRyLJ/Y4PtnZQ80WghenLapUdHyhb5qqb4m8Oe1ARYCXkTd5b0hCVJWj0+J0j+5e4UBGGmaqaqYkZDoWoKVTNRFRNdUqqWYOStVHz2ytPqFq8dooVgfCyaoAWXOkLuscZgtCHRCYlJGOiELTUiNze5bC6zl+yzk1zChh3KTnPUOA7rjoOy42HZ8uXjGUUItEDXe306VjeEi+dfqAiDULHjJtxiwiUKvkgVO1nKhrUMtCVThkRpgleEY/COaHuF9woJihAUEnQU0YSgCB5QCWBRygKXQV3rbSDt5S1h/qn5/qTBn4bSCmMUJomEwdioN3Zzrn66hU01Sq94e1dv7s94fec3+fP1q+TjPI8xPM3bvBwLgvce7x3OO5xzONfhnKPz3WLcdb12XT/uxbd0XUvnWnxw9MlgPSmJhTPOgzylEt95809d+5QcsSfWC1gMmTckYrFojETRovqxiXNorGhSMWSSkIeEXBI2Qv5GcwE7HA3Ri96ojoa4adTS4VQgEPAifStiRa00jei+O5detikW1W/MKBrRNChqFAfAiVG4UYJnF4B75nWLwLwdrEnUGmus8UoQEZw7oSy/paq+papu07kTuu4E143p3AlN84i6vsur+u3T9Arb23/McPAxKNNXKYuhKQrdF0votdKofk1cuzJ/aq3pbwjimrgraM6sjTvcy+c6/bzWbjEYfPzGSnZ7HyjHLeNHJQ+/mfDbnx9QjttImhpHcG92W1FpxXAzIUlNvMnSYPv4d0MM8zCAQdiwmk2j2ELQbSA8LJDbk8W5yl7eJjyeh8kRpa4Zq5JjSirVRq9R70nyBLo3XLa4U93CO1TaktrUiyILrWlp0NTdPnVzg7a5gmuuEdo9Xi+P47iXJZRAJpBJbIw6FEW2EEhFYXuuaFDMeeMAYVNqNsWRi8cET3AhJgixAWoXpTIoM5TSCK/x+1axPc8aL46N3YzRTsZgM2W4FWVpJ6QD2xMjjbE9SbK9t8VqtL647y/vPV3X0bbtKWn63L6F1O0Ta54m3XveH0n1BCjBkojBsCQ60e7nREcyRMwL3AoDdmTESDJyUgxvN9TSIzQEGoQTPEd4DvEcKs8BngMCxxIY94VQ2t5jGlAE0QQsIslyjnkO2w8P66+sNdZY44VQVbd59OifMyt+FXsUVd/i3OT5D3wBKJWS5zcY5LfI8xvs7f0D9vb+IUmyfSHnf5doK8fksGJyUDM7rmlKF3OM6ugl6lbD7CpPOWmoZt0bixdXCqzVjHLDpe2UoVakCGkQEi/kLpB1Ho1A5164qvM8v/ptwuF5mBzyXfKAe+aIAzOhoMUHGPgBuV8pVvAar2cg0JhmkUPkVcwrmucXzedXCdPMVHQqAAYJKaG9TGiuEsorhOYKobmK+BFPI0xaIO8JTiqQEPVyvLSftmZBkl7rBuf0jrB+D4rfqeDQoUMHB8Sqcn0dtkXZMDUvGTa/vZM+1+jUWlnUXTv3eK9V771QSO85kRUvSh8Wlmh0qtGJQSUJevsqavNyrLy2CAc7U77+jMdmMbdyfHUuGVj2rg3ZvT5i99qIJLuYX0YIYeG9aduWqqqeK2fJ0buuBvk6EAGHpkPTiaHDoEJCTk4Wcobk3JIRn8uQHE2GZoAif8vk53l4SOA2gbsE7vRyQKACKmShn/qVLnGj8cn5N3bJHzzWJGqNNX7AWHiTqu+oqu9om8c4P8O7Gc5NF3bd3Kcofv3Kz6N1Sp5/xCC/SZ7fJO/J0mBwizy/RZpefmcluC8STeUYPyo5vl/w9V8+5vF3U2bHbza22xhFnhryVJMbxcAoNhSMBEzrY/K6il/2i0pKcw/a7GkVoC5uV1GlGpUaVKJ76e3UoKyOx20UjKKmxamAV4EWR0XNsR9zr3vAo/aAo+6I43bCpJ1iC8vl+jIDP4AAphuxxeilr7EyFaUtqWxFaea6psBShAFlt42vP0W6LcT1uThiEIkasWfGhlM3IwvSsyQ2q56gq16z7xX5ylzyge7sat9ifI3xLcY3SwnzcYsOLcZ3UYcO7Vt06Ba2CV0c92vntrEam1lMnqKzDJXnqCxFpxYlDdpPUOV9tJugrKCNoIygba+NoJOlrWwkRfN1yir01j7q2o9R138f9el/ANf/CLZuxfLUbxEhhBi21pObVXvaPeb4m/vLsLVz1rzIeD7n/fsXsNhX0sbHUiEEZdBJirYZyqZRTIKYBEwC2i6KaCxF40XTiaLqhLILlJ2nbAN1GwhdIHXCjlP8CMM/wHINxSU0w7f8+QsIBbHYSsvpIixn9exMTuIjAt/1ZOldI6VjWxVs6pINXTPSDZnu0Lr//GlBaUWwmirNmaUjZumIOslobUqTpjQ2g39i4PBd/zTPx5pErbHG9xyxv8wRRfE1Zfk1VfUdZfUddXWbsvr2tQs4GLPBcPgJg8EnpOklEruDTbZJ7A5JstOX4b7F6zRkfR8gInSNj/2OZh110VFNWh5+M+Hxd1PGjyvq2cWGn2SpZntg2c00l63GNh7T+tOkaBFSGJvFspr+pPpFrwGVGfTAogcWlUdtNpLlODfo3KJyg8563c+r3MZqdz260HF7cpuvjr/iV/d+xd37dykmBapWmNowKAYk/tmx8JqUS1zmEpdf6PoDgZNkyklS0ihHqwKtEloFpfaMtcNhCd020t0kVHuEbg/ptolkKRKgTFiQnKFS3NrIuD7M2baaAZoMRRoE7UA6T2gCoQ34xuMb/97s5hpXY32FdTXGVVhfY10ViYx4dOibt8pprYNDi++9QC42efUtiSuxrlqIlpe8IbcWs7OD3d3BbI2wmyOS/U2y/QHWTjDNPYwuMNagpYZuAq6CroKujFX0nod0A3Y/g62bsHVjqTevwmAPBrtRsq0LI0vOOcqypCxLiqJ4QhdFQV3XTyU778KzE/tQx/Asj8ITSYhnLgp3ZhyPx3Li87EojWjbE5vVfkw6Chov8XmcKLyAE4ULggvQeaHz52QsneltPQC2UKdkF8U14DrCDoEMIQNyFBmQYcm5+E0K15OcdkXPyVDUy7nHBH5L4H5fkOWY2EPsZTJXFYJRAas8RgVS7RmqgNEhzvda64BW0ns9o9Z9lYmlV5XoDZ1XkZ/XW4k7bss5rfp+V/2E1ohWVDbnIN3maLjDJEmZSMA6h/Wu1x1mxV4e67DeYYqSLTcm6VqSriHxjgfVjA8hW3pNotZY4wOFc1Pq+h5VfYe2eUTbHdG1R2f0IW13jMjF9JwYDD5mf/8/6ct0xx5FSbL3xnKD3hba2nH7b44oTmIoXd3L0m6piu6Vc5GMVWxspYyGCZlRsdyxDxgv6M6ju2hbINOxR0au5yVmBVofBV6ZFKlURzI07AnQMNpmaNG9rUdJnBsl6KF9ggS9KLrQcXt2j2/vfct3k+/49sG3PLzzkPJxyUazwWa3iRFD1v+7CNSqppYa1zlUociPU3QNtMIQGMkghmP15a8RsEoYDq6SJVsYO0SbIVqnKJWAirH/njNepTmmAit7v/7U6AIhYeHNsb6OtluxF1Jj3Yrt60iYXNWTpkic1GuyuezHPyb/gz8guXmD5MZNzOZG3ww0QVmLSnttLSpJ4rEkWYznx7AWdfw16hf/G/zq/4LH//L0Ex291mXC3udw5ffgJ/84ija9592dIi7OOVzl6CYnOHfw5LHz1p8z17YdjfPUraOoauq2WxCF0HtT/Km8kpUxup/LEfLF+mUeyjLv5Oz8E3PzdXLO3JnznZ1/+3ktwrN2FwxwA82naG6guYbiGprraK6i2XzD1+sQjhQcGOHAws8H8OuhpswUhdWUBkoLpVF08wZIfQhm7KEFy/jM88bLx8iZ8dnji1J9q8cgfj+EgA4eHQImeLSP+Yu6nzchrMydmQ9xfkFynMO4nvSsEJ2ldhi/tK3rlsd8h3EO+yIbG8/Bv2iqNYlaY401LgYiQl3f4fjkzzg5/jOOT/41dX3nws5vzAaDwcfk+fVYYc5sYuwG1mxg7QbWbrG5+fsMh599kITJu0Bx0jA7aSJRmnZUs5Z62jE9qrn/1clLdVh/FoyCjUSzqeGGVmxbxUCBCgFmTwntM+qlyZHKDGYzRW/05GeUYHoiZDaSOL+RYEZpJET26TvsIoLUNWE2w88O6e4XhGJGmM0ITYN0HdK0zMoTHp485PH4gKIo6JoK39SEriG4llZbapvSpQN8usHjvRGpjEgkYa//96IIhNjgldjPSwfBuoB1QuLBOhgVHXvHLVuTgPEWbzK8GRJ0ijdpP07xOtphYffH7ODMc5525L0JqNBhT5Gbmqw+YnvyG7J20pOdpXfH+ObN3CoqBUmCTtNIbs5oPRxi9vawe7vo3T3M7g5sbSHWxlAzH2ibGv/wK0J5TPAd3ncE5wjeEbxHwlxcrwPiWqQtkKboe74pBIPwk0Vz1HmnpNCT19B7OzwGhz6lPbq3U5wd0poBXue4hwr/74XuT/8/fPh/cQGCyLnkQ/rnCoAs9Ol1cY06M7/ImnoKAZmvevZ3y1MyUb53MCh2bM6uzhiZhExZMm3Ie53pWN1xy2Rs6pSRSd98ryJgolqOVcc9W/GrZMKJ7phqRyktSubEw6NLz/5sOVYh9iRTfW8yJbGcuJKVscgZ+2X1c9a88VdnjWdhTaLWWOM9hPcNZfVbppN/y/Hxn3F88mc0zf3XOqe124xGXzAcfMpg8PEpSZLdD5IczSEi1EVHcdIyPap58PUJxw9KZseROFWTi+3+vtq5faThklVsGsVIK7KVPh7Pv+6+qedcQoBcYwYaPTTo4VwbzMighgYzMJAqhIB3juAavCtw3tN2Dn9Y4L98jD94jD88RMoSaRqkbpCmRpoGmmjTNNA2UDeo8PQbPQEmW1vMNjfobIKzFmMtkljEpnT5Jg9uXKPJ81OPGz2LkYhgOk9We9JGSFtFXmuGhcF6S5deYrL1KS55eo5TMHBwOcrbwJIAlVGveHgi4Tk9Pu+4Ce9JAr4ItC2hvdjPxhw/BFLww4SCJEclI1Q6ijrJwcRcpagzMCnYDGWHqOEeariHzrd7v5P0/829ULKcZ+mb8qHB84x1fXVN7yucq3GuwvmStp3QdBNaN8OLwweHF4eTjiAej8OJw4vHSYtHCEoRtGJTxe9xr/XS27PGGk/BmkStscY7gojH+zIWcHAznJ8ym/2SBw/+D8bjn/Eie+Jap2TZDfLsGkm6R5pc6vUeSXqp1/38B0yUQhCO7s2YHjU0RcxHasrYH+nhbyYcPygIL9kj6CyMgj0TSVDWd2xPVa91tDMVCZR+yusoIkh1hBvfxh9+hVRHSDNF2hnSThHXAD1ZktBXAns3OO8n8Foz29iIsrnBdGOTyfYW4+1t2uz1wu5MNyRpt0m6LYwbYd0AtdLbRAxUoyhvFRLYOfmKUfmAvD4i6WbvPwFa472HAE5rnOmlvzGfh3kt6gKuhHIJffX4U8fmDXj74Dd1+hj9Y6QP91rQjTPrzj2f0n3OkiYYQ2sMrdW0RtFpCKpvNjv/tui/92SlCqL0rZkX82fhgEkv7wKK5/R5Wzctvmgokdi0WgTT6zgOJF4YNS2jpiN1HusDSQgkPmB9LISkgP+lfr/L28+xJlFrrPEGIRIYj3/G8cmfURZfU9V3aep7dG6M9y/Q2PIMhsPP2dn5Kbs7f4+dnb9Dll37XlS1g9iccHbSMDmoGD+umBzEsuDjRyUnD8sLCbdLQ0seWtLQkUqvfcOWm7DTHmNDt0JuItFZeIuCR3xH41vwLSId0IF04DvEt4RyCm39vMt4L9CkKcd7u4y3tjne3eVg/zLFaPR6u68iDIvAoBKyWlFnnxH0JYzP0XIBzRNFMNJhxPW6Q0us6rZqx0pvLVo6VGhRvgFfg28gNCjfonttuxkmVPM72Zh2IPGm01mFsxD/VG6++GUSzyVPHS8LaJ8ay2ph7Wfr9xlv8/oWwXSL0ub0IVbz0uYrx1Vf9jweQPf24uZ/cdm9h8MoOqPpjMJZjddq4bEQpfA90QgqEqSgFV4v7Q8fZ3KW3pPiKGu8PmI4ICufl3kfYkFLtLX0RGhuh6VtREhdIPORGOnVx77QFSRgE7Ax2PXsX/dgvrnYH/gNYU2i1ljjAuF9zaNH/yfjyV9S13eZzX5J0zx4pXMplTIafc729p/0pOmnZNn+BV/xy0G8p7t7F39yQqhjaFio60WoWFjofs65mE/TOkLnoO0IjWPc5UzckGnYYKY2meptSrOJvGYFP+1b0nbCRnGXrclvyesj8uaErDkha8ZoebonITDfT33/EHeP56IX1a4WNnphB21ps23qbItysEOT59S57UXT5Io2C7TZS2b/CBg/QIUEJRolFiUGFQxKDCZkZNX+gix1CZgQZY60GZN0s0h6bOyZg64JuomNkTRIovDW4BPwWUtnaqrQ0bQN3rfLv9Cy+N+Z6zw7N981t72MFnRGBDyKTmKOjZM+v2aegyPzSmWaIH0hgLleqTB2lgCt0ojTvYsdE1RjAAAgAElEQVR48lh/IWplvJx/cm61MISS5dz83IuxnBkv1j9/TktYiJEQb6A4O9fPS+hvnuZkRVbGASUQdIjeEhXvzkRJJC5q/nqsXvf5P+/8dTz7Gq5m7StZjpWszL/npHONd4Gz7wl1ZkqtKPWUNcu1coaAR0utLnn6c68Mo0dRE5IUSVPEWGTRkCzKYtz/XaAPPZSVMnuysn5xbC7M9fuL4le/hOptt2l/eaxJ1BprvCBEBO9nNM1DxuO/oqx+S9ed4LoxnTuh604oiq9fqRKe1gOs3SBLr7C98ydcvfKP2Nr622h9cR9R8Z5QVYSiIBQloSqRqiJUdbTrmlBWhLpCqgo/neHHJ/jxmHAyxp0c092+E3Nqzp4bRTG6RjG8Tjm8gjeDlcT+vNdR6nwPZ4dne3g+F0o8g/IxiStIugLbFSSuZFg9Ynv8G7LmGOuq9+J2qcp2GG99ymx0iy7ZoEs36ZINnB30ZEf3f+j0CgGakyO1QpBWa84+CUHwpsLbEmcLunSCNyWiHaLP7u3FrivPhSiMz6O4AcYN0S7DtknMmwoFEiZImKBCjQotxldoV2FCjZIuPo8K8WZZC6IhqEBtDVOt8VrAe1TTvfDv62Jq+K3xxqHO6FU8uxjbC5zgw4RCo5VBL+icQveihGjLktDOCwosmgH3hQToiwnM9XJude38GCw9c7294nBbkNUVom59IHWe4R/9ZyRJjiDUMqUOMyqZ0VDQ6hZH1zeSjt9VLL6zTN/Taem1c0rj+5v40H/fLW/u9eLtMH9l5mGJ572Kq+qJgTpnbjH1/XkvvS0Igld+IfOND1l8iJcbQIvxynuJlffy/L13+v3NKS/xsohGfyy8r1uap7EmUWuscQYiQtM+5OTkzzk5+ddMJj+nbQ5eo1S4Ynf377O99bfJBx+R5zdJ08uLynfGbDyTLH35YMLfurb1zOt1jx7T3b1Dd/ce3Z3bNF99TfvNN/jplFCWhKJAqospwNzZIdXgMnV+iXJwmfH2jzjZ/uKJSmevirSdkFcHDKoDBvVSb8zuYH1P4LRB5Zt9nwoNViPpNkHtLPqXLPuWRE9C9BToGP6o+npYK8SFU4TmyXH08qR4k+B1SjDJogpc0MmiAlw5vHJhr8UqgnKRMCUFXTKlSyZ4W7K4M3oFaCeklSdpHGlRk1Ql0hV41RBwBBUIKnoRnhuhbnh27oEAXfQEfj8CUNf4PiGSifm/SGwshpyEVAyZaJIQyY4R6ctDx5yPRTlpH8tGG+/70s8tpmtRrgHXwMv20HpH+Kcb31KOziYnDnt5M1hHCr4mZElkzhKaEGJVSi8K6hrqGuliBc0gc097rEoZRCGyJLwBvbD9vM+X0rGZMQo/b2q82gNMmT7Mtbf7czy5Js75lR5iXhm80pzwf8MHUOR8TaLW+EFCJNA0D6nqO9TVd1TV7Sj1dxTF1zj36h9eY4bsX/6P2dz6A/L8Bpsbv89gcPMVrlH407+6zX/3v/4z/outKf/RrQEUBb6YEWZFLEc9HtN+8w1hOn3l6wVwJl8QozrbwdkB3gxwNseZHG9znB1QDfZp06cTuhf/4QJDNyP3MzI3JfNTrJti/JQgHV0IdOKok8As0bity4SrVxCl8doyHe0SdIpSGagcpXNQI7S9jlIfxtea9HlXAYdXHUF1BNXQqYKgZ4gtEdOCDYhVyDNKlD/7iQLKOXRbo9sG1TXRbmp0Wy/2bdte3sVfhU5ZfO91mwdvwUqQ2SKJ/mzQGix6sqzOLY4tH7eaj8Spx0W9Gor2ZJ7N6WN6seZ0KN088ueUL2V1h1wtn3t1oZwaL9ednfcqUCU1jWnpdNcTXCH0IXKBgBAICqRvqHm6KEG0VueYFyNQKzXQ1KqWU+uWj5WV65//TuTMY59cv3qOeFz47PE+18bbxJC8QNI58taRdS1p15E4R9I5Euexft7nRlZyNlYS2Vd2s+dar+x+60UuSN8z7IVzOL4/CMS8Lq80rUmYZjnTbMA0HTDLhvzNSUZR2j4yVp36fc2xGqp23md2cUydPXb+OeYUNnZlU9F7h8IqxUBZRlhGKkq+CPtWK5/e5bPKUwM4T3u5BJ66cnXh08/7Yo+VU0f6mYV37NnvPnXqmp+1tg8t7iMYInGJ2wGi1PLRKU/U0lAvYD/5bC/3mPnPrREsAXNGNB6LoOkweP5rPLef8fzvCz6Mu4011ngFiATq+g6z4teU5W+pqtvU9e1e3yG8srtYMRx+zvbWH0WPUrJDYrdJkh3y/AYbG7+L1qdj1cR7/NERfjymOTpm8uiQ2aNDynsPcPfuER4+gNkUqgpTl9imImkbbkngf+jPMe896XXCeOtzqsE+Qe8h2/vIjiGsdIafh4OFU93iDaLnnhdLMAmiLW2yRTG88qov86tBacpkizJ5NUL2PKfHqyCSmlgoQiRqT4vTM1ozpTMlnakIugXVofp0WB2WOR0Qq1kt/2Qtd7ZX97jjYR1vKlfi2INNkCSNMe6LczznJxVBdQ2mqdB1iakKlOtQ3qOCg3BxvUQEqBJhZjeYqivUOlvZUVzdcezniDuWfrFzqRd2qxIKO6Q0Izr9ekUnktAy9CUbvmQzlAxpyOlI8aTKkaiAVQGrBKNiVyJDwKi41xqji5a5BoucA71iz4/xQkGRL4xAoLTlQhrT0JiaRje93dCalkY3+CdCNN885jfSC5GztkZEg/Te3aBJnWZYCxs1bFSwUQsbtTBsYNAKeSts1jCqYNQIm9Uhm81Dhm3D0H0YVbleF50yFEnOLBlQLCSnshm1SWh7aUxCq3ttlrrTNobK6fj5ctrglYlaa9w8JLj/GxC0wWhDpgy50gxRDIEBiiGKDEhQJMDHK7YFUhQW+rEi7eeTfn7+fawXJCiO7crc6rw5Z07/4KjsGs/C4GXj/d8R1iRqjQ8W3jdMJn9FWX2DcxNcN+nLhU9pu0Mmk5/j3KvXVc2zG+zs/pSdnZ8yHHy6LB2e7KBWCiCEumZ6NObR3SN+/fCY48M/pTyZUI2nhIPHDO98y49+9ReM6tkTz/GsoK/ODjje+pxidJ1qsE812Kcc7NNkO3042hrnQaRD3GPwx4iUeCqCrfG2QpQj7pbH0IegIWjBGwgaxMQ4ftFxLzQJCSSDSGwAy4Bn/9bOuR4uMFQl+OhBaipMOcPURfQmvWSp9IDQJYHWBtok0CZCawNV5pkNHMXAUaeBzkZprdDZgDNx297d/08Jh39/6ZXpd/Y1sXDA3Kek++vS/eut+1dkrjdwbMgJysexUmDFY/FYcSQSsDgS5bEqkKqAVhLPp3p/kNI4Ywhpf9MoBhgiRM9ac44XSs6dO20v1oVnP1b611MgeoSgb8I6n5970mTxHF4FPAGvAk55xCtwS9/WnKCslqBYjpdE5lSJihVyI4s1PP2corHecWt2wM3pAYOuJQmeJLiovcMGTxpcnPPzY1FS78h8S+5aBr4hdy15P15murxJnPHq9bZKR6jBJfRwD0wCxM2koONGUtCaoG0MUerJvujlJlNYkA+93Iyar9HLXMWgTHwP6rP5jHqZJ9Sfb7426OU6rfSiya4BdoA9IsFYEovTJOPsvD5n/fL4mpSsscabxppErfHeI4SGsvyG6fSvORn/OWXxG+r6LnXzgBfppfQsJMlebDib32Iw+Ih88BHD4edsjL4gSXYBqFrP3ZOSx3/xJdO//lcUjx7THhzij4+5+t2vuHF8b3G+vV5eFoKiGlymGF6nGF1jvP05h3s/+V6QJZHA/LZSiSDiUNKAP0HCpC9UUCBSItL3UZKAihHaOGvweYJoRdzw1r2HQPVzOmrT77rqPtdJm0XVIsh7eTrmt2Krr/ibvhUUoDOW1lham0TbWjqT0BJoVKDWUFuoE0OTWNoko0tynM1wNidtHvPFr/97vBKCjuLn5LAfB8XS7sevc4/lDbTm4vO+XgpyRr8GUmLhirTfkc/63fa5Xp0fADmqf0epU/Z873SFtpwZnw4Hevq65ZhnrDnt8wRESHriYxdV9ZZhb3PbiGDFY0SBuoLaunI6vOiUffZqeeG1aiWU6xTZOe+85609E/L0ofa5W+P10BEo8BQEShyxBW/oM3b6zB0V+jDb5ZwiYBYhuL6fX9qL4yqwDNU9bS9Dd1dDeUO/UXD6y0edGj/ri+kp656a33r+evXUNc96/qdd4/PXq1f5mZ6zZv7KBtTilQ9oUE9uOr+PWJOoNd5LVNUd7t//3zk4/BfMZn+NPC8hd/595vvvofgdiwqQJTcYZh+TpzfI7TWUukLr92ncJmWpmB7U3CsbirJlMq2Zzf6G8exnnMxqwviEGyf3+If3fs5+NWbnFX6WgNANR1TbO5SbW5Rbm9QbOW6UYq5PSS4fk25OSIaH6PQeCXC5l7cNEfCNxtUWV2lcYwhOE7zBe03wGh+inot3li7kOJ/hJSWEFE9KIEHELnfNV8OA5jdIq+VXGYIaLccrFZzeB8RgP8EpaBU0Flqjaey8oaahtYbOzglRQmdTOpPgTEpnU5xZlVit8HXhTMedKy9WNERCioQMQv+7CQkiCdonjMKIkR8y8iNGfsAoDBiGnFHIGIacYUgZSspQEpQfosgXhLOvIbjQ0VYr9rPWLcnF89fFtavz562bn2P1Gp52PvN92rFXgLFwAe+rNb6/CKYmmIZgopc+jtu+qqdDlDtjd6A8KAeqg/+/vTuPl6Ws7zz++VVVnz53YREF3EAE0bgEF1xAYoSEJG7kpWKcaBwlmWQmJiYRHXXMJI4as7ziEh2jE2cyEWc0CypijA5mIagYl0QRREOAiyCbl+VeuNs5p7uqfvPH81R3dZ/qc06fpfuee7/v16te1fUsVdWnntNdv66nniIPrwndmnuThy/e8DoO7eN57XUZlilJvCApQ73ES5Iy76UlXoTBOrwgKXNS75CWxPvepvzHO8SURny+WZiHiaG5hR/i0uo5ac1li1rZ4fpuVX4tLam6sy+28LH74Z4J/zFWQUGUTFw1VHincw+d7i727b2OPXu/zcLCD+h07mZhYSfd7u5YFihSbPcM2R0Z2Z1G6wfQ2um07iqwbgiUrOx/svZvjq7+Oe8F7iW3b7FvKK/qnPWgoX/k+j929XphZqa3XGIspC0WshkWspQDxx3F/odsZ+7YGfKjHN9S4O0uzIQvpjI+e8Y9ofQ5Cl+g9JTSE4riaHz3MRS7Tg5pWBgpx1MKN7xMY12L85TSw681pSeUZZx7/A2tyi+NVien1e2SFOFGbKtuyC5LrCzDL9JFzmyxwGw+T7uInZ/iL8HlTJtyZhZP03hlJ95XlaSQJr00jKl+mhRm5GlGN83opimdNCNPM/IkpZumFA45TiczumlKnoSgpzclaSifpuRJRpFm5ElcR5pRJhmeHJxPtk/9GE6/7ZW0yjZZ2aZVtmh5m6xs0fI4lRkZKS2MGcI9EA/EeBDGMSRsP5QCCTnsFa19dGfvoczmcUqonk9VvcZxi7+yVd17LXbAjPPqeVZhEIBymfUM1Y2dOa332qmurPdfV2WKWtna3MNjAogBSD8vBiO1YKW/HOolXoDHMUo9pIVApoux0HvGVzX4RhL/FFY9NNUdK+m9Tso1Xbg+7FRBhFvoJl5a7NJbCzDCc9MsDgLTL9PPi/lJrdxQ3YF6tfV7b3v0Hg5dpOF10Rs1LwtDOXiGlymUKV5mcUrD5CGNMu3/CBrPRcIPowm9jZcxvf6jacx3jz9ZuS1eT8zr1w3p+cL/oX8n+MFLQZRsCHdn165d7Nx5G7vv3cl9u+/h3l13cO+993BgLpz49/rnuwGzuD8SeGS4Ub4apnP4knkbeAT4SYuDnIPmWRB74zSmtQ+WUHVtHLpqlxlky6/Zgfk1bT+eIlgShzeNw6TWXpdJ7Xkh8QM9jLiXxAAoBEH912EqkhZFbbkTy4R5CIQ2u1bhbCtKtuXO1tzZWjjb8moK6dsK2JqXbM/hqG7G1tw5Mnceu/eMae/+IaUg/AJfUlBaUXudh6HmCfOymluX0vLYdTXc/4RZNSoDXv8Mq7/ugi2EKZkDmwPrjqo3WLe6Da5XpnZfXNkGbzueAolTpkAalzOnbIG3oWw7zDIwuh4WZrWx+uLcqI/gV6vRL2P9l/30kFh/GOngu2p6l968ZA2lvL9RN6ewnDJpeqj20A9lTUPONaqVK+MdZW7MLhQ8cFeXrPDe11S9w2LjBZPeNqu7AptOwVa2X76o3OJ6zRdtmta/dMewketfwd9w8X6O2oeV1G1+j72gguqcvurhMJw3nBbvga0659niznsYlJ7EQzeYz0BZGzynKeoBQy2wgBg4MHQOZI3LQAxCWNyrY8R6F+cnMUgK02Z4yESx8CkURB3GzGwL8GbgZwmD3ewCLgN+291vn+a+rRcvSnbumuP67+3i5utu5r47b6ZzYDfdoks3madMmkZZWuK+lNqTAL16sYl//6rCv34gkfR+FVoy0Og9mNAW17Whukm97mD55nXW19Ow3qT2mrD+4f0Zrlt/fdAEshOQls5sCbOF0y6gXTrbctiaO9sKZ3tOLQgKedtyZ3vubC36edtjnZmxu6k0nSiujbuTA12vJid3yIde13/aGJh7U7qPLNe4jiXXNTRvKFO9HtjuMusqPPYA9vpdlhsxBuQSMuCIDVq3E5pLDix+Vras0mYYgllENo6CqA1gZrPA5cAZwJ3Ap4GTgJ8HXmBmZ7j7Teu5zW7p3DrfYceBeW6aW2DHgQVuOrDAqdtm+f1HP3zF6/HSKfd3ye9foHPfArtuv5ed11zLvu9ew/ye+zlQFuzLjL2zGXMPcPIjE7rZLF7dUj12t66SNM1JkoIkzUmTItzkmYQbRa03+UAaVlKmRhEHFSgtvC7SOMRykrB3/gHs3vNQiqSfViRxiOWkGhrWKJI0LscHvzWWTymS+GC5pF9mVCDkMcCRyZspwlWcLQVsKZzZAtpFCHja1XIZAp/Zah7TZmNar04tvVcnris7CPrm5+7Ml1UA4PFhifQ6DvVee7g3r1rOHRZi3Xl3OmUImtY/LBMRkc2gfq9oYv3l6nVVpvfaQooNp9P/PXVR+kBdGuti0Nokv8cqiNoYv0UIoL4C/KS77wMws9cB7wb+DDh7rRvZmxe84uod7Ng3z637F8gLxwoPP6uWTlrkzCW386ff28mBTs6e/SX7D5TsmyuZW4D5HDplQqdMyT2hW0BmXbYlC2y3BbZZh61Jl61ph61PXGAmycnSgiQpyJKCralRpglFmtKNN9YX8Z6SbpKEe0lsJtxbkrTI4wM18/gMi67FOS1yWuRk5GQDy92G9C4ZhW2OZwjIoKR0Ug9XcVKH1MPDL7MStnSd2aJktuvM5nEqnC3dknZ83c5LtlR53ZLZ3ENeHl7PdMtecNN0hQJf3B1poKwPpceg4wDO/vpqYmeO+sjijWuub2+o+9Wi0ou6QQ2W6e1bTOyUBfPF4gFXlh5BqfbGasI1l8G05u+whnU391ta5bqW3/cVvb+B9VfdvWp9zVa9rv4aR3V6Gijn3vDm+/XMwFInST3Ms5Ikc5J08aijq97XkSN+Lbf+1dZr2IfGmovrreg9NryflexD836stl5VLmGhfCjd8liqU8GBIeUXpY1e2/LbW53Vrmvl9VbyP7t+1nVdtZXVbhAAvPdjLVaG+97wWL7qJ+ND9ap1Dub311kra7WHE9S6udbX1atvQ+lD668+2XrbsKZthX3vdVI0Dz9MU3tOXu/91Tc2eGyXPdKL/jeXqzGUX9t+K90cl8wVRK0zM5sBXhMXf7UKoADc/T1m9irg2WZ2urt/Yy3b2rnrAFf+xXUAZDhbky5bsjlmW3Mck93Pcelutrf2cV2rw0yrIGmV2EzKtm0p7VZKnrXIs6x/Q37SosMMCxzJTtosMEOHNh3aLNCOeWG5Yxr9aT2kZbhpN4nBRFq9jqMQhbx+mbRa9vD5ntbyLAYmSbzPuV5v1PqSGNBUeWmZ0+p2SIsuWd4lK3NaeZcsz8mKDlnepVV0yfJOmIourbwTpu4CWVG9nqeVL9DqztPuztHu7KfVnSMrOhjVs3P6U/0Bp05cThLKdIYyzfC0RZlmWJIx6xYGekiz8MyVNKOMA1+USULXnK6VdCnpWE6HLnk5R6fcS2JOaiWJQZqE4W2T2rOHsqT/OrGSDMeSeApU+3KqvnRCQq13fJVug+UsluvXr9VJal/ItS/I3q9/A+v0gXXW10MymF6tx6D3Hhjedn2d9XXVl5vKw6JBE23RC+h9SdpKyjYVYPEXuxwSSqc/YA4WBsOJU+FJ7GaZ9NMxCq8G3YnDKPTKW29gnYH19Jab1rN4XUWtTOlJGNhn0f6F9BKjU4QHSIvI+tq/oCHOD1dnAUcBO9z9qob8TwCnAecBawqi0m3OA88t6dhMmJhhP20Ky7hlLSvexDLPw8M6vSAtjKQzQ1rEKx8lZEWYNy1nJaT15aKWXsur12kMTGJ6PeBZFMw48QGlS/D+yE7hV6piYKL2Oml4HZ6FkWN0oexi3iHxnMS7pGWXxLok3iUpu8yUe8jKPWTEobITwk3yFkKe6oby6jV4NZBOuIF91sNVhN79r+HkObfQRWy/xZVauCdu6PEvvZP0LAY0VYCTJvvIYuCTDs0TK8lisJNara6VA+UyjYkrh6jqpN9jAFDUTv6rAKTwpdNCUJEMpnk9rV5vsM5A4NEbMXQ4IElCN9La+sqBKzMiIpuTgqj198Q4/+aI/Cr9tLVuqMMMt6cnrHU16yLznHaZM1PmzJRFfOJ9SVqUtEqnVXgIPgrrT3lCkhtpkZLkCWmekJXWGMikJWSl9wKipCzJig5pmZN5h7TsYnSxpIOnXZKkS2IdUuuS0Y3zglbVKdDCvO05M3Rp02WGnNRyEnISK/qvKeKv8WHIWItXL6guhRPv20prj4uz8CDA6oGAWK1sVb72aLmqfL++Tvzl0FcNDFHGUanCPIwuFYbrD8vV67LK86pjSr/uQP7Qclg3tXIWu2raiPzm9fYGp67tb2+fR+x/fZ/Lhu0PvPfeVZD6+ga3s+mDkFr3JRGRzUxB1Po7Mc5vG5FfpT9iJSszs++MyDplRfW9ZIYOM95lpuzGp9kXtMuCduG0C2emMNq5MdNJ2NJtsaXTZqabhAAmJ85LkhzIS6wLnjtpHoKjVsGIB+AlDA+ladYJVxeSA2R2gFaynxmbo53sp20HaNsBtnCALXaA2WSOGQtTy+ZpJXO00nlmkjlSOurmI6tWEp7f4fUHBg48RLD/fA1P4umexZPs2O4Wz21l6b11Ea/0rWFdA/PBfavvc297y9RZLn1gXYvmNl56zJu86uru2hkTHb9PJqB/W54NpTXcUeXDadZYv7lsLBPLL7rDphreul52iX1cvI3ly+PDd5P1P6QahyZfsvxy+z+cP8Y2en+jxfvfuI0l/qbdbps9e48l785QeoqXCWUZntnoZRpel/F5jDGv95yjDVV1q64+FoeXY9fq+PuJ1buMV923rXl5sHt2fX2E7ujD6xpYHqzf37YP5o/Yv17dgX32xeuuvVczp/2Vr8KeDf6TrwMFUetve5wfGJFf3Z++5sFsj+zu42U3fZ7ZTsrsQsaWhRm2zG1he2cr2/OtbOu2yErDKSgpKSgoPU6EZ5y45zg5ZkW8ElKEEfAIy4nlZLZAZh1atkBKJy4vkM10SGNeZh1S65ARr/7Eq0Bpld5b7o//Nfjl4Is/IG24XBCu1wzfBt9UfugLZsTfsbfd4c/nRSVtdN7Athu+bBeVb/rwb9insdc/+F68ljpcxkekr/jvaIN5466nV6/3t+gPlV4k1ciH6cDQ6mEeR0zsDffeH02xtNqoiUlCaWksWxuVMd57ZU37ZMNpi/e5Sqk/kLnpVVisRQ62VLmmbTXuYX9dZqRZi+G/9+j9XsFJwMigZnBfmk9+4jYGGnVDuWUCp6X3c7XvdSV/7zH3Y1XvY6X70XTsG95n4z6M9177+7nE+1n2vS59X1DzfvZrL78NW7b9hm20wWYxZoHZ2us2kMQy1VRbd9z20vvJisqsNf9Q28bw33a1aeu1noNte/VJ+t60/W/Rc6Jkzdz98U3pZvadZCF/3AUPO40HPeyhbDvqCLZs2YplKaQJSZZV5QDDkiSee4UTyHASWT8RGP4iG1rWP7iIiIiICKAgaiNUQ4psHZG/Lc73rnVDxx//YJ74nOeudTUiIiIiIjIGjc25/r4f56OecFul3zKBfRERERERkXWmIGr9XR3nTxmRX6VfM4F9ERERERGRdaYgav19GbgfOMXMntSQ/5I4/8zkdklERERERNaLgqh15u4d4I/j4gfMrLoHCjN7HeH5UF9w9zU9aFdERERERKZDA0tsjHcA5wLPBG4wsy8Rngv1DOBu4BemuG8iIiIiIrIGuhK1Adx9HjgH+B3C86JeSAiiLgKe4u43TW/vRERERERkLXQlaoO4+xzwljiJiIiIiMghQleiRERERERExqAgSkREREREZAwKokRERERERMagIEpERERERGQMCqJERERERETGoCBKRERERERkDAqiRERERERExqAgSkREREREZAwKokRERERERMZg7j7tfZBVMLM97Xb7iFNOOWXauyIiIiIisi527NjBwsLCXnc/ctr7shQFUZuUmXUJVxKvm/a+yEGvirR3THUvZLNQe5GVUluRcai9yEr9EFC6e2vaO7KUbNo7IKt2PYC7P37aOyIHNzP7DqityMqovchKqa3IONReZKWqtnKw0z1RIiIiIiIiY1AQJSIiIiIiMgYFUSIiIiIiImNQECUiIiIiIjIGBVEiIiIiIiJj0BDnIiIiIiIiY9CVKBERERERkTEoiBIRERERERmDgigREREREZExKIgSEREREREZg4IoERERERGRMSiIEhERERERGYOCKBERERERkTEoiBIRERERERmDgqhNxsy2mNnbzex6MxiCq5UAABLMSURBVJs3szvM7M/M7GHT3jdZf2a21cxeaGb/28z+LR7z/WZ2tZm9xcy2L1H3AjP7upntM7NdZvY5M3vmMts7K5bbFet93cxeuf7vTCbBzB5oZneZmZvZjcuUVXs5TJnZsWb2rvgZMxeP5zfN7J0jyp9nZl8wsz1xusLMnr/MNh5vZh83s7vjNr5tZq81M52HbBJm9jQzuzied3TN7D4z+5KZ/byZWUP51MwujMd6Lh77i83ssctsZ+z2JZNnZqeb2X8xs0vM7Lb4PeMrqDeR7xoze7iZfTi21/l43vw2M5sd972O5O6aNskEzAJfARy4A/gr4Gtx+S7g5Gnvo6Z1P+a/GI+vA98FLgYuA/bEtH8Fjmuo996YfwC4NNbpAjnwwhHbOj/ml8AVwCeA3XE975r230LTqtrPRfF4OnDjEuXUXg7TCTgduCcet2uBvwQ+B9wM5A3l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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(dpi=150)\n","for usuarios in usuariosRandom:\n","  user = ratings[ratings['userId']==usuarios]\n","  user['numeroRating'] = np.arange(1,len(user['movieId'])+1).tolist()\n","  sns.lineplot(x=\"Segundos\",y='numeroRating',data=user)\n","  plt.xlim((0,10000))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"X_f5Y3c3LF6j","executionInfo":{"status":"ok","timestamp":1664215053376,"user_tz":180,"elapsed":33483,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"0ede42b3-d3fc-4a2f-8934-ccc5484ba858"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import numpy as np\n","plt.figure(dpi=150)\n","for usuarios in usuariosRandom:\n","  user = ratings[ratings['userId']==usuarios]\n","  user['numeroRating'] = np.arange(1,len(user['movieId'])+1).tolist()\n","  sns.lineplot(x=\"Segundos\",y='numeroRating',data=user)\n","  plt.xlim((0,100000))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"FeFwIJ6zMR1B","executionInfo":{"status":"ok","timestamp":1664214977285,"user_tz":180,"elapsed":34441,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"f380b677-ce81-4fea-d4c1-12d632f9ac68"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"5ntDQORi5-LU"},"execution_count":null,"outputs":[]}]}